#+TITLE: Number Length Directed Graph
#+AUTHOR:Devin Homan
#+COPYRIGHT: 2016 https://creativecommons.org/licenses/by/4.0/legalcode
# All code listings are "free and unencumbered software released into the public domain."
#+DESCRIPTION: Creating directed graphs for counting systems using SQL.
#+KEYWORDS: sql, relational algebra
#+STARTUP:  overview
#+PROPERTY: header-args :eval no-export

#+DATE: [2016-09-12 Mon]

* Related                                                          :noexport:

[[wiki:index][Index]]

* Number Length Directed Graph
** Problem
   In his YouTube video, [[https://www.youtube.com/watch?v=LYKn0yUTIU4][Four has Four Letters]], Matt Parker creates cyclic
   directed graphs out of counting systems.  Given a language's counting system,
   count the number of letters in the spelled-out representation of a number,
   and then go to the number that is the character count.  For any language,
   this forms a directed graph that ends in a cycle or cycles with one or more
   numbers in the cycle.  He poses a number of challenges in the video.

   1. Find longer chains in English.
   2. Find a language with a bigger loop than French.
   3. Find the /k/ threshold for a language. All numbers bigger than /k/ have
      spelling lengths less than the number itself.

   Parts of the problem are solvable in SQL using the recursive queries;
   specifically, transitive closure, which I covered in my previous
   thread post.
** Tools
   To create a table of numbers and their spelling lengths, I decided
   to use the Emacs package, [[https://www.emacswiki.org/emacs/SpellNumber][spell-number.el]].  The spell-number
   package provides the function ~spelln-integer-in-words~, which given
   an integer, will give the spelled representation.  The particular
   language can be selected by setting the ~spelln-language~
   variable. The default is /portuguese-br/, Brazilan Portuguese.

   The [[https://github.com/skeeto/emacsql][emacsql.el]] package was used to insert data into an SQLite
   database.  Directed graphs were made using [[http://graphviz.org][Graphviz]].

   The numbers were stored in the following table:
   #+BEGIN_SRC sqlite :db sql-number-length-dag/number-spelling-length.db :results none
CREATE TABLE number_lengths (
       numb INTEGER PRIMARY KEY,
       English_eur INTEGER,
       English_gb INTEGER,
       English_us INTEGER,
       Catalan INTEGER,
       Danish INTEGER,
       Dutch INTEGER,
       Esperanto INTEGER,
       Finnish INTEGER,
       French_ch INTEGER,
       French_fr INTEGER,
       German INTEGER,
       Italian INTEGER,
       Japanese INTEGER,
       Norwegian INTEGER,
       Portuguese_br INTEGER,
       Portuguese_pt INTEGER,
       Spanish INTEGER,
       Swedish INTEGER
) WITHOUT ROWID;
   #+END_SRC

   The first 1-million numbers and their lengths were generated using the
   following Emacs Lisp script. The script must be compiled.
   #+BEGIN_SRC emacs-lisp :results none :exports code :tangle sql-number-length-dag/number-spelling-length.el :eval no
;;; -*- lexical-binding: t -*-
(let ((nsl-current-directory "/home/devin/notes/sql-number-length-dag/")
      (nsl-elpa-directory-sqlite "/home/devin/.emacs.d/elpa/emacsql-sqlite-20180128.1252/")
      (nsl-elpa-directory-sql "/home/devin/.emacs.d/elpa/emacsql-20180205.1835/"))

  (require 'emacsql-compiler (concat nsl-elpa-directory-sql "emacsql-compiler.elc"))
  (require 'emacsql (concat nsl-elpa-directory-sql "emacsql.elc"))
  (require 'emacsql-sqlite (concat nsl-elpa-directory-sqlite "emacsql-sqlite.elc"))

  (defsubst nsl-number-length (number language)
    "Return the number of character in the spelled representation
of NUMBER for the given LANGUAGE."
    (let ((spelln-language language))
    ;; delq's remove comma, space, and dash characters
      (length (delq 44
		    (delq 45
			  (delq 32
				(string-to-list
				 (spelln-integer-in-words number))))))))

  ;; itterate [0, 999999999]
  (let ((number 0)
	(jump 500) ; maximum number of sql operations per transaction
	(current-group '()))
    (emacsql-with-connection
	(db (emacsql-sqlite (concat nsl-current-directory "number-spelling-length.db")))
      (while (< number 1000000)
	(emacsql db
		 [:insert :into $i1 :values $v2]
		 'number_lengths
		 (dolist (itter (number-sequence number (+ number (1- jump))) current-group)
		   (push
		    (vector itter
			    (nsl-number-length itter 'english-eur)
			    (nsl-number-length itter 'english-gb)
			    (nsl-number-length itter 'english-us)
			    (nsl-number-length itter 'catalan)
			    (nsl-number-length itter 'danish)
			    (nsl-number-length itter 'dutch)
			    (nsl-number-length itter 'esperanto)
			    (nsl-number-length itter 'finnish)
			    (nsl-number-length itter 'french-ch)
			    (nsl-number-length itter 'french-fr)
			    (nsl-number-length itter 'german)
			    (nsl-number-length itter 'italian)
			    (nsl-number-length itter 'japanese)
			    (nsl-number-length itter 'norwegian)
			    (nsl-number-length itter 'portuguese-br)
			    (nsl-number-length itter 'portuguese-pt)
			    (nsl-number-length itter 'spanish)
			    (nsl-number-length itter 'swedish))
		    current-group)))
	(setq current-group '())
	(message "%i to %i done." number (setq number (+ jump number)))))))
   #+END_SRC

   The script can be run from the command line. This will take several minutes
   to compute, almost 9.5 minutes on my computer, but you can get the same
   results by reducing the number of values calculated down to 100,000.
   #+BEGIN_SRC sh :eval no
emacs -batch -load spell-number.elc -load number-spelling-length.elc
   #+END_SRC

** Data Representation
   The spell-number package supports Catalan, Danish, Dutch, Esperanto, Finnish,
   German, Italian, Japanese (Romanji), Norwegian, Spanish, Swedish, three
   English dialects, two French dialects, and two Portuguese dialects.

   The British dialect of English uses the traditional European counting system,
   https://en.wikipedia.org/wiki/Names_of_large_numbers; milliard and billiard.
   The European English version is ported from the Spell::Number Perl
   package. It uses the Long Scale (Traditional British). All English versions
   use `and'; although, not consistently. 101 is one hundred one in US English,
   but 1001 is one thousand and one.  The British dialect always uses "and".  In
   the European dialect, the trailing one is left off in numbers such as 1001,
   so "one thousand and". The US and European dialects only start differing from
   1001; numbers below this are spelled the same. British English starts
   differing at 101, due to the inclusion of "and".

   The French dialects are standard French (French_fr) and Swiss French
   (French_ch). The Portuguese dialects are standard Portuguese (Portuguese_pt)
   and Brazilian Portuguese (Portuguese_br).

   The largest value that spell-number can "say" is the largest
   hundred-quadrillion or 999,999,999,999,999,999.  Dutch and Finnish only go up
   to 999,999,999.

   Catalan, Esperanto, Finnish, French-ch, French-fr, German, Italian, Japanese,
   Norwegian, Portuguese-Br, Portuguese-Pt, Spanish, and Swedish contain
   non-ascii characters.  The Japanese version is Romanji.  All characters were
   counted as single characters.  Spaces, commas, and dashes were removed for
   counting.

   Only the natural numbers 0 to 999,999,999 were counted for each language, and
   only their numeric value and spelled character lengths were stored in the SQL
   database.
*** Dialect Differences                                            :noexport:
    Differences in dialect can be found by comparing the
    The following queries use a Common Table Expression (CTE), named
    /diff/, that does a set difference between two language tables,
    returning those entries in the first table that are not in the
    second. Only the first differing value is returned. The second
    table is joined with the /diff/ table and the numbers where the two
    tables differ plus their respective lengths are displayed.
**** French
    #+BEGIN_SRC sqlite :db sql-number-length-dag/number-spelling-length.db :colnames yes
SELECT numb, French_fr, French_ch
FROM number_lengths
WHERE French_fr <> French_ch
LIMIT 10;
    #+END_SRC

    #+RESULTS:
    | numb | French_fr | French_ch |
    |------+-----------+-----------|
    |   70 |        11 |         8 |
    |   71 |        14 |        12 |
    |   72 |        13 |        12 |
    |   73 |        14 |        13 |
    |   74 |        16 |        14 |
    |   75 |        14 |        12 |
    |   76 |        13 |        11 |
    |   77 |        15 |        12 |
    |   78 |        15 |        12 |
    |   79 |        15 |        12 |

    #+BEGIN_SRC emacs-lisp
(nsl-list-number-language-length 70 'french-fr 'french-ch)
    #+END_SRC

    #+RESULTS:
    | french-fr | 11 | soixante-dix |
    | french-ch |  8 | septante     |
**** Portuguese
    #+BEGIN_SRC sqlite :db sql-number-length-dag/number-spelling-length.db :colnames yes
SELECT numb, Portuguese_pt, Portuguese_br
FROM number_lengths
WHERE Portuguese_pt <> Portuguese_br
LIMIT 10;
    #+END_SRC

    #+RESULTS:
    | numb | Portuguese_pt | Portuguese_br |
    |------+---------------+---------------|
    |   14 |             7 |             8 |
    |  114 |            13 |            14 |
    |  214 |            16 |            17 |
    |  314 |            17 |            18 |
    |  414 |            20 |            21 |
    |  514 |            18 |            19 |
    |  614 |            18 |            19 |
    |  714 |            18 |            19 |
    |  814 |            18 |            19 |
    |  914 |            18 |            19 |

    #+BEGIN_SRC emacs-lisp
(nsl-list-number-language-length 14 'portuguese-br 'portuguese-pt)
    #+END_SRC

    #+RESULTS:
    | portuguese-br | 8 | quatorze |
    | portuguese-pt | 7 | catorze  |
**** English
     Comparing English US to English EUR.
    #+BEGIN_SRC sqlite :db sql-number-length-dag/number-spelling-length.db :colnames yes
SELECT numb, English_us, English_eur
FROM number_lengths
WHERE English_us <> English_eur
LIMIT 10;
    #+END_SRC

    #+RESULTS:
    |  numb | English_us | English_eur |
    |-------+------------+-------------|
    |  1001 |         17 |          14 |
    |  2001 |         17 |          14 |
    |  3001 |         19 |          16 |
    |  4001 |         18 |          15 |
    |  5001 |         18 |          15 |
    |  6001 |         17 |          14 |
    |  7001 |         19 |          16 |
    |  8001 |         19 |          16 |
    |  9001 |         18 |          15 |
    | 10001 |         17 |          14 |

    #+BEGIN_SRC emacs-lisp
(nsl-list-number-language-length 1001 'english-us 'english-gb 'english-eur)
    #+END_SRC

    #+RESULTS:
    | english-us  | 17 | one thousand and one |
    | english-gb  | 17 | one thousand and one |
    | english-eur | 14 | one thousand and     |

    Comparing English US to English GB
    #+BEGIN_SRC sqlite :db sql-number-length-dag/number-spelling-length.db :colnames yes
SELECT numb, English_us, English_gb
FROM number_lengths
WHERE English_us <> English_gb
LIMIT 10;
    #+END_SRC

    #+RESULTS:
    | numb | English_us | English_gb |
    |------+------------+------------|
    |  101 |         13 |         16 |
    |  102 |         13 |         16 |
    |  103 |         15 |         18 |
    |  104 |         14 |         17 |
    |  105 |         14 |         17 |
    |  106 |         13 |         16 |
    |  107 |         15 |         18 |
    |  108 |         15 |         18 |
    |  109 |         14 |         17 |
    |  110 |         13 |         16 |

    #+BEGIN_SRC emacs-lisp
(nsl-list-number-language-length 101 'english-us 'english-gb 'english-eur)
    #+END_SRC

    #+RESULTS:
    | english-us  | 13 | one hundred one     |
    | english-gb  | 16 | one hundred and one |
    | english-eur | 13 | one hundred one     |

    Comparing English EUR to English GB
    #+BEGIN_SRC sqlite :db sql-number-length-dag/number-spelling-length.db :colnames yes
SELECT numb, English_eur, English_gb
FROM number_lengths
WHERE English_eur <> English_gb
LIMIT 10;
    #+END_SRC

    #+RESULTS:
    | numb | English_eur | English_gb |
    |------+-------------+------------|
    |  101 |          13 |         16 |
    |  102 |          13 |         16 |
    |  103 |          15 |         18 |
    |  104 |          14 |         17 |
    |  105 |          14 |         17 |
    |  106 |          13 |         16 |
    |  107 |          15 |         18 |
    |  108 |          15 |         18 |
    |  109 |          14 |         17 |
    |  110 |          13 |         16 |

    Finding where "and" exists in English US.
    #+BEGIN_SRC emacs-lisp
(let ((spelln-language 'english-us))
  (delq '()
	(mapcar #'(lambda (num)
		    (let ((word (spelln-integer-in-words num)))
		      (when (string-match "and" word)
			(list num word))))
		(number-sequence 0 1001 1))))
    #+END_SRC

    #+RESULTS:
    | 1000 | one thousand         |
    | 1001 | one thousand and one |

    Finding where "and" exists in English EUR.
    #+BEGIN_SRC emacs-lisp
(let ((spelln-language 'english-eur))
  (delq '()
	(mapcar #'(lambda (num)
		    (let ((word (spelln-integer-in-words num)))
		      (when (string-match "and" word)
			(list num word))))
		(number-sequence 0 1001 1))))
    #+END_SRC

    #+RESULTS:
    | 1000 | one thousand     |
    | 1001 | one thousand and |

    Finding where "and" exists in English GB.
    #+BEGIN_SRC emacs-lisp
(let ((spelln-language 'english-gb))
  (delq '()
	(mapcar #'(lambda (num)
		    (let ((word (spelln-integer-in-words num)))
		      (when (string-match "and" word)
			(list num word))))
		(number-sequence 0 1001 1))))
    #+END_SRC

** k-Threshold
   The k-Threshold is the largest number where the spelling length is
   not less than the number's value.  The language with the largest
   k-Threshold is Finnish at number 8, kahdeksan, with a length of 9
   characters.  Japanese has the smallest k-Threshold at number 3, san,
   with a length of 3 characters.

   | Language             | k-Threshold |
   |----------------------+-------------|
   | Japanese             |           3 |
   | English_us           |           4 |
   | English_gb           |           4 |
   | English_eur          |           4 |
   | Swedish              |           4 |
   | Norwegian            |           4 |
   | German               |           4 |
   | Standard French      |           4 |
   | Swiss French         |           4 |
   | Esperanto            |           4 |
   | Dutch                |           4 |
   | Danish               |           4 |
   | Catalan              |           4 |
   | Spanish              |           5 |
   | Standard Portuguese  |           5 |
   | Brazilian Portuguese |           5 |
   | Italian              |           5 |
   | Finnish              |           8 |

   k-thresholds were found using the following style query.
   #+BEGIN_SRC sqlite :db sql-number-length-dag/number-spelling-length.db :colnames yes :exports code :eval no
SELECT numb, English_us FROM number_lengths WHERE numb <= English_us;
   #+END_SRC

*** US English                                                     :noexport:
    #+BEGIN_SRC sqlite :db sql-number-length-dag/number-spelling-length.db :colnames yes
SELECT numb, English_us FROM number_lengths WHERE numb <= English_us;
    #+END_SRC

    #+RESULTS:
    | numb | English_us |
    |------+------------|
    |    0 |          4 |
    |    1 |          3 |
    |    2 |          3 |
    |    3 |          5 |
    |    4 |          4 |
*** EUR English                                                    :noexport:
    #+BEGIN_SRC sqlite :db sql-number-length-dag/number-spelling-length.db :colnames yes
SELECT numb, English_eur FROM number_lengths WHERE numb <= English_eur;
    #+END_SRC

    #+RESULTS:
    | numb | English_eur |
    |------+-------------|
    |    0 |           4 |
    |    1 |           3 |
    |    2 |           3 |
    |    3 |           5 |
    |    4 |           4 |
*** GB English                                                     :noexport:
    #+BEGIN_SRC sqlite :db sql-number-length-dag/number-spelling-length.db :colnames yes
SELECT numb, English_gb FROM number_lengths WHERE numb <= English_gb;
    #+END_SRC

    #+RESULTS:
    | numb | English_gb |
    |------+------------|
    |    0 |          4 |
    |    1 |          3 |
    |    2 |          3 |
    |    3 |          5 |
    |    4 |          4 |
*** German                                                         :noexport:
    #+BEGIN_SRC sqlite :db sql-number-length-dag/number-spelling-length.db :colnames yes
SELECT numb, German FROM number_lengths WHERE numb <= German;
    #+END_SRC

    #+RESULTS:
    | numb | German |
    |------+--------|
    |    0 |      4 |
    |    1 |      4 |
    |    2 |      4 |
    |    3 |      4 |
    |    4 |      4 |

*** Danish                                                         :noexport:
    #+BEGIN_SRC sqlite :db sql-number-length-dag/number-spelling-length.db :colnames yes
SELECT numb, Danish FROM number_lengths WHERE numb <= Danish;
    #+END_SRC

    #+RESULTS:
    | numb | Danish |
    |------+--------|
    |    0 |      3 |
    |    1 |      2 |
    |    2 |      2 |
    |    3 |      3 |
    |    4 |      4 |

*** Dutch                                                          :noexport:
    #+BEGIN_SRC sqlite :db sql-number-length-dag/number-spelling-length.db :colnames yes
SELECT numb, Dutch FROM number_lengths WHERE numb <= Dutch;
    #+END_SRC

    #+RESULTS:
    | numb | Dutch |
    |------+-------|
    |    0 |     3 |
    |    1 |     3 |
    |    2 |     4 |
    |    3 |     4 |
    |    4 |     4 |

*** Norwegian                                                      :noexport:
    #+BEGIN_SRC sqlite :db sql-number-length-dag/number-spelling-length.db :colnames yes
SELECT numb, Norwegian FROM number_lengths WHERE numb <= Norwegian;
    #+END_SRC

    #+RESULTS:
    | numb | Norwegian |
    |------+-----------|
    |    0 |         4 |
    |    1 |         3 |
    |    2 |         2 |
    |    3 |         3 |
    |    4 |         4 |

*** Swedish                                                        :noexport:
    #+BEGIN_SRC sqlite :db sql-number-length-dag/number-spelling-length.db :colnames yes
SELECT numb, Swedish FROM number_lengths WHERE numb <= Swedish;
    #+END_SRC

    #+RESULTS:
    | numb | Swedish |
    |------+---------|
    |    0 |       4 |
    |    1 |       3 |
    |    2 |       3 |
    |    3 |       3 |
    |    4 |       4 |

*** Spanish                                                        :noexport:
    #+BEGIN_SRC sqlite :db sql-number-length-dag/number-spelling-length.db :colnames yes
SELECT numb, Spanish FROM number_lengths WHERE numb <= Spanish;
    #+END_SRC

    #+RESULTS:
    | numb | Spanish |
    |------+---------|
    |    0 |       4 |
    |    1 |       3 |
    |    2 |       3 |
    |    3 |       4 |
    |    4 |       6 |
    |    5 |       5 |

*** Catalan                                                        :noexport:
    #+BEGIN_SRC sqlite :db sql-number-length-dag/number-spelling-length.db :colnames yes
SELECT numb, Catalan FROM number_lengths WHERE numb <= Catalan;
    #+END_SRC

    #+RESULTS:
    | numb | Catalan |
    |------+---------|
    |    0 |       4 |
    |    1 |       2 |
    |    2 |       3 |
    |    3 |       4 |
    |    4 |       6 |

*** Portuguese Br                                                  :noexport:
    #+BEGIN_SRC sqlite :db sql-number-length-dag/number-spelling-length.db :colnames yes
SELECT numb, Portuguese_br FROM number_lengths WHERE numb <= Portuguese_br;
    #+END_SRC

    #+RESULTS:
    | numb | Portuguese_br |
    |------+---------------|
    |    0 |             4 |
    |    1 |             2 |
    |    2 |             4 |
    |    3 |             4 |
    |    4 |             6 |
    |    5 |             5 |

*** Portuguese Pt                                                  :noexport:
    #+BEGIN_SRC sqlite :db sql-number-length-dag/number-spelling-length.db :colnames yes
SELECT numb, Portuguese_pt FROM number_lengths WHERE numb <= Portuguese_pt;
    #+END_SRC

    #+RESULTS:
    | numb | Portuguese_pt |
    |------+---------------|
    |    0 |             4 |
    |    1 |             2 |
    |    2 |             4 |
    |    3 |             4 |
    |    4 |             6 |
    |    5 |             5 |

*** French Ch                                                      :noexport:
    #+BEGIN_SRC sqlite :db sql-number-length-dag/number-spelling-length.db :colnames yes
SELECT numb, French_ch FROM number_lengths WHERE numb <= French_ch;
    #+END_SRC

    #+RESULTS:
    | numb | French_ch |
    |------+-----------|
    |    0 |         4 |
    |    1 |         2 |
    |    2 |         4 |
    |    3 |         5 |
    |    4 |         6 |

*** French Fr                                                      :noexport:
    #+BEGIN_SRC sqlite :db sql-number-length-dag/number-spelling-length.db :colnames yes
SELECT numb, French_fr FROM number_lengths WHERE numb <= French_fr;
    #+END_SRC

    #+RESULTS:
    | numb | French_fr |
    |------+-----------|
    |    0 |         4 |
    |    1 |         2 |
    |    2 |         4 |
    |    3 |         5 |
    |    4 |         6 |

*** Italian                                                        :noexport:
    #+BEGIN_SRC sqlite :db sql-number-length-dag/number-spelling-length.db :colnames yes
SELECT numb, Italian FROM number_lengths WHERE numb <= Italian;
    #+END_SRC

    #+RESULTS:
    | numb | Italian |
    |------+---------|
    |    0 |       4 |
    |    1 |       3 |
    |    2 |       3 |
    |    3 |       3 |
    |    4 |       7 |
    |    5 |       6 |

*** Finnish                                                        :noexport:
    #+BEGIN_SRC sqlite :db sql-number-length-dag/number-spelling-length.db :colnames yes
SELECT numb, Finnish FROM number_lengths WHERE numb <= Finnish;
    #+END_SRC

    #+RESULTS:
    | numb | Finnish |
    |------+---------|
    |    0 |       5 |
    |    1 |       4 |
    |    2 |       5 |
    |    3 |       5 |
    |    4 |       5 |
    |    5 |       5 |
    |    7 |       9 |
    |    8 |       9 |

   #+BEGIN_SRC emacs-lisp
(nsl-list-numbers-in-language 'finnish 8 9)
   #+END_SRC

   #+RESULTS:
   | 8 | 9 | kahdeksan |
   | 9 | 8 | yhdeksän  |

*** Esperanto                                                      :noexport:
    #+BEGIN_SRC sqlite :db sql-number-length-dag/number-spelling-length.db :colnames yes
SELECT numb, Esperanto FROM number_lengths WHERE numb <= Esperanto;
    #+END_SRC

    #+RESULTS:
    | numb | Esperanto |
    |------+-----------|
    |    0 |         4 |
    |    1 |         3 |
    |    2 |         2 |
    |    3 |         3 |
    |    4 |         4 |

*** Japanese                                                       :noexport:
    #+BEGIN_SRC sqlite :db sql-number-length-dag/number-spelling-length.db :colnames yes
SELECT numb, Japanese FROM number_lengths WHERE numb <= Japanese;
    #+END_SRC

    #+RESULTS:
    | numb | Japanese |
    |------+----------|
    |    0 |        3 |
    |    1 |        4 |
    |    2 |        2 |
    |    3 |        3 |

   #+BEGIN_SRC emacs-lisp
(nsl-list-numbers-in-language 'japanese 3)
   #+END_SRC

   #+RESULTS:
   | 3 | 3 | san |

** Loops
   The language with the largest number in a loop is Finnish, with a loop
   between 8 and 9, or kahdeksan and yhdeksän. Danish, Norwegian, and Esperanto
   each have three independent loops. French has the largest loop.
*** Finding Loops
    The transitive closure can be used to detect loops. Any number that is part
    of a loop, will loop directly onto itself in the transitive closure. The a
    root number's eventual "length", /len/, value will equal itself.

    #+BEGIN_SRC sqlite :db sql-number-length-dag/number-spelling-length.db :results silent :exports none
CREATE TABLE number_lengths_10 (
       numb INTEGER PRIMARY KEY,
       English_eur INTEGER,
       English_gb INTEGER,
       English_us INTEGER,
       Catalan INTEGER,
       Danish INTEGER,
       Dutch INTEGER,
       Esperanto INTEGER,
       Finnish INTEGER,
       French_ch INTEGER,
       French_fr INTEGER,
       German INTEGER,
       Italian INTEGER,
       Japanese INTEGER,
       Norwegian INTEGER,
       Portuguese_br INTEGER,
       Portuguese_pt INTEGER,
       Spanish INTEGER,
       Swedish INTEGER
) WITHOUT ROWID;

INSERT INTO number_lengths_10
SELECT * FROM number_lengths WHERE numb <= 10;
    #+END_SRC

    #+BEGIN_SRC sqlite :db sql-number-length-dag/number-spelling-length.db :colnames yes :exports none
SELECT * FROM number_lengths_10;
    #+END_SRC

    #+RESULTS:
    | numb | English_eur | English_gb | English_us | Catalan | Danish | Dutch | Esperanto | Finnish | French_ch | French_fr | German | Italian | Japanese | Norwegian | Portuguese_br | Portuguese_pt | Spanish | Swedish |
    |------+-------------+------------+------------+---------+--------+-------+-----------+---------+-----------+-----------+--------+---------+----------+-----------+---------------+---------------+---------+---------|
    |    0 |           4 |          4 |          4 |       4 |      3 |     3 |         4 |       5 |         4 |         4 |      4 |       4 |        3 |         4 |             4 |             4 |       4 |       4 |
    |    1 |           3 |          3 |          3 |       2 |      2 |     3 |         3 |       4 |         2 |         2 |      4 |       3 |        4 |         3 |             2 |             2 |       3 |       3 |
    |    2 |           3 |          3 |          3 |       3 |      2 |     4 |         2 |       5 |         4 |         4 |      4 |       3 |        2 |         2 |             4 |             4 |       3 |       3 |
    |    3 |           5 |          5 |          5 |       4 |      3 |     4 |         3 |       5 |         5 |         5 |      4 |       3 |        3 |         3 |             4 |             4 |       4 |       3 |
    |    4 |           4 |          4 |          4 |       6 |      4 |     4 |         4 |       5 |         6 |         6 |      4 |       7 |        3 |         4 |             6 |             6 |       6 |       4 |
    |    5 |           4 |          4 |          4 |       4 |      3 |     4 |         4 |       5 |         4 |         4 |      4 |       6 |        2 |         3 |             5 |             5 |       5 |       3 |
    |    6 |           3 |          3 |          3 |       3 |      4 |     3 |         3 |       5 |         3 |         3 |      5 |       3 |        4 |         4 |             4 |             4 |       4 |       3 |
    |    7 |           5 |          5 |          5 |       3 |      3 |     5 |         3 |       9 |         4 |         4 |      6 |       5 |        4 |         3 |             4 |             4 |       5 |       3 |
    |    8 |           5 |          5 |          5 |       4 |      4 |     4 |         2 |       9 |         4 |         4 |      4 |       4 |        5 |         4 |             4 |             4 |       4 |       4 |
    |    9 |           4 |          4 |          4 |       3 |      2 |     5 |         3 |       8 |         4 |         4 |      4 |       4 |        3 |         2 |             4 |             4 |       5 |       3 |
    |   10 |           3 |          3 |          3 |       3 |      2 |     4 |         3 |       8 |         3 |         3 |      4 |       5 |        2 |         2 |             3 |             3 |       4 |       3 |

    #+NAME:trans_closure
    #+BEGIN_SRC sqlite :db sql-number-length-dag/number-spelling-length.db :var lang='English_us' :colnames yes :exports code
WITH RECURSIVE
-- Get all numbers that are <= the language's longest spelling length.
nodes(numb, len) AS (
    SELECT numb, $lang AS len
    FROM number_lengths
    WHERE numb <= (SELECT MAX($lang) FROM number_lengths)
),

iterations(iter) AS (
SELECT(SELECT COUNT(*) FROM nodes) * (SELECT COUNT(*) FROM nodes)
),

trans_closure(iter, numb, len) AS (
    SELECT 0 AS iter, numb, len FROM nodes
    UNION ALL
    SELECT iter + 1, A.numb AS numb, B.len AS len
    FROM trans_closure AS A JOIN nodes AS B
    ON A.len = B.numb
    WHERE A.iter < (SELECT iter FROM iterations)
    ORDER BY 1 ASC
)
-- SELECT * FROM trans_closure WHERE iter = 3;
SELECT DISTINCT numb FROM trans_closure WHERE numb = len ORDER BY 1 ASC;
    #+END_SRC

    Initially, /iter 0/, only numbers and their lengths are stored in the
    /trans_closure/ table. In the first iteration, the /nodes/ table is essentially
    inner-joined with itself and the /trans_closure/ /len/ is set to the length of
    the number whose value is the length of the starting number, /numb/. /numb/
    is always the starting number. In the succeeding recursions, /len/ is set to
    the length of the preceding length value. In US English, by the fourth
    iteration, all results stabilize to the value 4.

    #+CAPTION: Transitive closure /len/ progression for English.
    | numb | iter 0 | iter 1 | iter 2 | iter 3 | iter 4 |
    |------+--------+--------+--------+--------+--------|
    |    0 |      4 |      4 |      4 |      4 |      4 |
    |    1 |      3 |      5 |      4 |      4 |      4 |
    |    2 |      3 |      5 |      4 |      4 |      4 |
    |    3 |      5 |      4 |      4 |      4 |      4 |
    |    4 |      4 |      4 |      4 |      4 |      4 |
    |    5 |      4 |      4 |      4 |      4 |      4 |
    |    6 |      3 |      5 |      4 |      4 |      4 |
    |    7 |      5 |      4 |      4 |      4 |      4 |
    |    8 |      5 |      4 |      4 |      4 |      4 |
    |    9 |      4 |      4 |      4 |      4 |      4 |
    |   23 |     11 |      6 |      3 |      5 |      4 |

    Stepping through the computation, if given the initial table:
    | numb | len |
    |------+-----|
    |    2 |   3 |
    |    3 |   5 |
    |    4 |   4 |
    |    5 |   4 |

    The ~JOIN~ produces:
    | A.numb | A.len | B.numb | B.len |
    |--------+-------+--------+-------|
    |      2 |     3 |      3 |     5 |
    |      3 |     5 |      5 |     4 |
    |      4 |     4 |      4 |     4 |
    |      5 |     4 |      4 |     4 |

    The next /trans_closure/ is:
    | numb   | len   |
    |--------+-------|
    |      2 |     5 |
    |      3 |     4 |
    |      4 |     4 |
    |      5 |     4 |

    In the next iteration, the ~JOIN~ produces:
    | A.numb | A.len | B.numb | B.len |
    |--------+-------+--------+-------|
    |      2 |     5 |      5 |     4 |
    |      3 |     4 |      4 |     4 |
    |      4 |     4 |      4 |     4 |
    |      5 |     4 |      4 |     4 |

    The next /trans_closure/ is:
    | numb   | len   |
    |--------+-------|
    |      2 |     4 |
    |      3 |     4 |
    |      4 |     4 |
    |      5 |     4 |

    In the following sections, it was found that every language loop occurred
    within the first eleven numbers. The following shell script runs a query
    that generates Graphviz Dot code, which is used to diagram the loops. The
    /$lang/ variable is not a shell variable, but instead is set by Emacs Org
    Babel.
    #+NAME: language_graph
    #+BEGIN_SRC sh :var lang='english_us' :results silent
cd sql-number-length-dag
echo "digraph $lang {" > $lang.dot
query=$(printf 'SELECT CAST(numb AS TEXT) || " -> " || CAST(%s AS TEXT) || ";" FROM number_lengths WHERE numb <= 10;' $lang)
sqlite3 number-spelling-length.db "${query}" >> $lang.dot
echo "}" >> $lang.dot
dot -Tsvg $lang.dot > $lang.svg
    #+END_SRC

*** English
    #+CALL: trans_closure(lang='English_us') :colnames yes :exports none

    #+CALL: trans_closure(lang='English_gb') :colnames yes :exports none

    #+CALL: trans_closure(lang='English_eur') :colnames yes :exports none

    #+CALL: language_graph(lang='English_us')

    #+ATTR_HTML: :alt English root nodes is 4.
    [[file:sql-number-length-dag/english_us.svg]]
*** German
    #+CALL: trans_closure(lang='german') :colnames yes :exports none

    #+RESULTS:
    | numb |
    |------|
    |    4 |

    #+CALL: language_graph(lang='german')

    #+ATTR_HTML: :alt German root nodes is 4.
    [[file:sql-number-length-dag/german.svg]]
*** Danish
    #+CALL: trans_closure(lang='danish') :colnames yes :exports none

    #+RESULTS:
    | numb |
    |------|
    |    2 |
    |    3 |
    |    4 |

    #+CALL: language_graph(lang='danish')

    #+ATTR_HTML: :alt Danish root nodes are 2, 3 and 4.
    [[file:sql-number-length-dag/danish.svg]]
*** Dutch
    #+CALL: trans_closure(lang='dutch') :colnames yes :exports none

    #+RESULTS:
    | numb |
    |------|
    |    4 |

    #+CALL: language_graph(lang='dutch')

    #+ATTR_HTML: :alt Dutch root node is 4.
    [[file:sql-number-length-dag/dutch.svg]]
*** Norwegian
    #+CALL: trans_closure(lang='norwegian') :colnames yes :exports none

    #+RESULTS:
    | numb |
    |------|
    |    2 |
    |    3 |
    |    4 |

    #+CALL: language_graph(lang='norwegian')

    #+ATTR_HTML: :alt Norwegian root nodes are 2, 3 and 4.
    [[file:sql-number-length-dag/norwegian.svg]]
*** Swedish
    #+CALL: trans_closure(lang='swedish') :colnames yes :exports none

    #+RESULTS:
    | numb |
    |------|
    |    3 |
    |    4 |

    #+CALL: language_graph(lang='swedish')

    #+ATTR_HTML: :alt Swedish root nodes are 3 and 4.
    [[file:sql-number-length-dag/swedish.svg]]
*** Spanish
    #+CALL: trans_closure(lang='spanish') :colnames yes :exports none

    #+RESULTS:
    | numb |
    |------|
    |    4 |
    |    5 |
    |    6 |

    #+CALL: language_graph(lang='spanish')

    #+ATTR_HTML: :alt Spanish root nodes are 5 and the loop 4, 6.
    [[file:sql-number-length-dag/spanish.svg]]
*** Catalan
    #+CALL: trans_closure(lang='catalan') :colnames yes :exports none

    #+RESULTS:
    | numb |
    |------|
    |    3 |
    |    4 |
    |    6 |

    #+CALL: language_graph(lang='catalan')

    #+ATTR_HTML: :alt Catalan root nodes make a loop: 4,6,3.
    [[file:sql-number-length-dag/catalan.svg]]
*** Portuguese
    #+CALL: trans_closure(lang='portuguese_pt') :colnames yes :exports none

    #+CALL: trans_closure(lang='portuguese_br') :colnames yes :exports none

    #+CALL: language_graph(lang='portuguese_pt')

    #+ATTR_HTML: :alt Portuguese root nodes are 5 and the loop 4, 6.
    [[file:sql-number-length-dag/portuguese_pt.svg]]
*** French
    #+CALL: trans_closure(lang='french_fr') :colnames yes :exports none

    #+CALL: trans_closure(lang='french_ch') :colnames yes :exports none

    #+CALL: language_graph(lang='french_ch')

    #+ATTR_HTML: :alt French root nodes make a loop: 4,6,3,5.
    [[file:sql-number-length-dag/french_ch.svg]]
*** Italian
    #+CALL: trans_closure(lang='italian') :colnames yes :exports none

    #+RESULTS:
    | numb |
    |------|
    |    3 |

    #+CALL: language_graph(lang='italian')

    #+ATTR_HTML: :alt Italian root node is 3.
    [[file:sql-number-length-dag/italian.svg]]
*** Finnish
    #+CALL: trans_closure(lang='finnish') :colnames yes :exports none

    #+RESULTS:
    | numb |
    |------|
    |    5 |
    |    8 |
    |    9 |

    #+CALL: language_graph(lang='finnish')

    #+ATTR_HTML: :alt Finnish root nodes are 5 and the loop 8,9.
    [[file:sql-number-length-dag/finnish.svg]]
*** Esperanto
    #+CALL: trans_closure(lang='esperanto') :colnames yes :exports none

    #+RESULTS:
    | numb |
    |------|
    |    2 |
    |    3 |
    |    4 |

    #+CALL: language_graph(lang='esperanto')

    #+ATTR_HTML: :alt Esperanto root nodes are 2, 3, and 4.
    [[file:sql-number-length-dag/esperanto.svg]]
*** Japanese
    #+CALL: trans_closure(lang='japanese') :colnames yes :exports none

    #+RESULTS:
    | numb |
    |------|
    |    2 |
    |    3 |

    #+CALL: language_graph(lang='japanese')

    #+ATTR_HTML: :alt Japanese Romanji root nodes are 2 and 3.
    [[file:sql-number-length-dag/japanese.svg]]
** Smallest Number of a Given Length                               :noexport:
   The /smallest_number/ query returns the smallest number having a
   particular length, ignoring zero, and for numbers greater than or
   equal to 100 and 100,000. Zero is added in for completeness, but
   "zero" is not used in naming larger numbers in English.  These
   numbers are used to find the likely next numbers in the English
   chains.

   #+NAME:smallest_number
   #+BEGIN_SRC sqlite :db sql-number-length-dag/number-spelling-length.db :colnames yes :var lang='English_us'
SELECT numb, $lang FROM
(SELECT numb, $lang FROM
   (SELECT numb, $lang FROM
      (SELECT MIN(numb) AS numb, $lang FROM number_lengths WHERE numb > 0 GROUP BY $lang
      UNION ALL
      SELECT numb, $lang FROM number_lengths WHERE numb = 0))
   UNION ALL
   SELECT MIN(numb) AS numb, $lang FROM number_lengths WHERE numb >= 100 GROUP BY $lang)
UNION
SELECT MIN(numb) AS numb, $lang FROM number_lengths WHERE numb >= 100000 GROUP BY $lang
ORDER BY 2 ASC, 1 ASC;
   #+END_SRC

*** US English
    #+CALL: smallest_number(lang='English_us') :colnames yes

    #+RESULTS:
    |   numb | English_us |
    |--------+------------|
    |      1 |          3 |
    |      0 |          4 |
    |      4 |          4 |
    |      3 |          5 |
    |     11 |          6 |
    |     15 |          7 |
    |     13 |          8 |
    |     17 |          9 |
    |     24 |         10 |
    |    100 |         10 |
    |     23 |         11 |
    |    400 |         11 |
    |     73 |         12 |
    |    300 |         12 |
    |    101 |         13 |
    |    104 |         14 |
    |    103 |         15 |
    |    111 |         16 |
    |    115 |         17 |
    |    113 |         18 |
    | 100000 |         18 |
    |    117 |         19 |
    | 400000 |         19 |
    |    124 |         20 |
    | 300000 |         20 |
    |    123 |         21 |
    | 101000 |         21 |
    |    173 |         22 |
    | 104000 |         22 |
    |    323 |         23 |
    | 103000 |         23 |
    |    373 |         24 |
    | 100001 |         24 |
    |   1023 |         25 |
    | 100004 |         25 |
    |   1073 |         26 |
    | 100003 |         26 |
    |   1111 |         27 |
    | 100011 |         27 |
    |   1115 |         28 |
    | 100015 |         28 |
    |   1113 |         29 |
    | 100013 |         29 |
    |   1117 |         30 |
    | 100017 |         30 |
    |   1124 |         31 |
    | 100024 |         31 |
    |   1123 |         32 |
    | 100023 |         32 |
    |   1173 |         33 |
    | 100073 |         33 |
    |   1323 |         34 |
    | 100111 |         34 |
    |   1373 |         35 |
    | 100115 |         35 |
    |   3323 |         36 |
    | 100113 |         36 |
    |   3373 |         37 |
    | 100117 |         37 |
    |  11373 |         38 |
    | 100124 |         38 |
    |  13323 |         39 |
    | 100123 |         39 |
    |  13373 |         40 |
    | 100173 |         40 |
    |  17373 |         41 |
    | 100323 |         41 |
    |  23323 |         42 |
    | 100373 |         42 |
    |  23373 |         43 |
    | 101173 |         43 |
    |  73373 |         44 |
    | 101323 |         44 |
    | 101373 |         45 |
    | 103323 |         46 |
    | 103373 |         47 |
    | 111373 |         48 |
    | 113323 |         49 |
    | 113373 |         50 |
    | 117373 |         51 |
    | 123323 |         52 |
    | 123373 |         53 |
    | 173373 |         54 |
    | 323373 |         55 |
    | 373373 |         56 |

*** EUR English
    #+CALL: smallest_number(lang='English_eur') :colnames yes

    #+RESULTS:
    |   numb | English_eur |
    |--------+-------------|
    |      1 |           3 |
    |      0 |           4 |
    |      4 |           4 |
    |      3 |           5 |
    |     11 |           6 |
    |     15 |           7 |
    |     13 |           8 |
    |     17 |           9 |
    |     24 |          10 |
    |    100 |          10 |
    |     23 |          11 |
    |    400 |          11 |
    |     73 |          12 |
    |    300 |          12 |
    |    101 |          13 |
    |    104 |          14 |
    |    103 |          15 |
    |    111 |          16 |
    |    115 |          17 |
    |    113 |          18 |
    | 100000 |          18 |
    |    117 |          19 |
    | 400000 |          19 |
    |    124 |          20 |
    | 300000 |          20 |
    |    123 |          21 |
    | 100001 |          21 |
    |    173 |          22 |
    | 104000 |          22 |
    |    323 |          23 |
    | 103000 |          23 |
    |    373 |          24 |
    | 100002 |          24 |
    |   1023 |          25 |
    | 100004 |          25 |
    |   1073 |          26 |
    | 100003 |          26 |
    |   1111 |          27 |
    | 100011 |          27 |
    |   1115 |          28 |
    | 100015 |          28 |
    |   1113 |          29 |
    | 100013 |          29 |
    |   1117 |          30 |
    | 100017 |          30 |
    |   1124 |          31 |
    | 100024 |          31 |
    |   1123 |          32 |
    | 100023 |          32 |
    |   1173 |          33 |
    | 100073 |          33 |
    |   1323 |          34 |
    | 100111 |          34 |
    |   1373 |          35 |
    | 100115 |          35 |
    |   3323 |          36 |
    | 100113 |          36 |
    |   3373 |          37 |
    | 100117 |          37 |
    |  11373 |          38 |
    | 100124 |          38 |
    |  13323 |          39 |
    | 100123 |          39 |
    |  13373 |          40 |
    | 100173 |          40 |
    |  17373 |          41 |
    | 100323 |          41 |
    |  23323 |          42 |
    | 100373 |          42 |
    |  23373 |          43 |
    | 101173 |          43 |
    |  73373 |          44 |
    | 101323 |          44 |
    | 101373 |          45 |
    | 103323 |          46 |
    | 103373 |          47 |
    | 111373 |          48 |
    | 113323 |          49 |
    | 113373 |          50 |
    | 117373 |          51 |
    | 123323 |          52 |
    | 123373 |          53 |
    | 173373 |          54 |
    | 323373 |          55 |
    | 373373 |          56 |

*** GB English
    #+CALL: smallest_number(lang='English_gb') :colnames yes

    #+RESULTS:
    |   numb | English_gb |
    |--------+------------|
    |      1 |          3 |
    |      0 |          4 |
    |      4 |          4 |
    |      3 |          5 |
    |     11 |          6 |
    |     15 |          7 |
    |     13 |          8 |
    |     17 |          9 |
    |     24 |         10 |
    |    100 |         10 |
    |     23 |         11 |
    |    400 |         11 |
    |     73 |         12 |
    |    300 |         12 |
    |   3000 |         13 |
    |  11000 |         14 |
    |  15000 |         15 |
    |    101 |         16 |
    |    104 |         17 |
    |    103 |         18 |
    | 100000 |         18 |
    |    111 |         19 |
    | 400000 |         19 |
    |    115 |         20 |
    | 300000 |         20 |
    |    113 |         21 |
    |    117 |         22 |
    |    124 |         23 |
    |    123 |         24 |
    | 100001 |         24 |
    |    173 |         25 |
    | 100004 |         25 |
    |    323 |         26 |
    | 100003 |         26 |
    |    373 |         27 |
    | 100011 |         27 |
    |   1104 |         28 |
    | 100015 |         28 |
    |   1103 |         29 |
    | 100013 |         29 |
    |   1111 |         30 |
    | 100017 |         30 |
    |   1115 |         31 |
    | 100024 |         31 |
    |   1113 |         32 |
    | 100023 |         32 |
    |   1117 |         33 |
    | 100073 |         33 |
    |   1124 |         34 |
    | 100101 |         34 |
    |   1123 |         35 |
    | 100104 |         35 |
    |   1173 |         36 |
    | 100103 |         36 |
    |   1323 |         37 |
    | 100111 |         37 |
    |   1373 |         38 |
    | 100115 |         38 |
    |   3323 |         39 |
    | 100113 |         39 |
    |   3373 |         40 |
    | 100117 |         40 |
    |  11373 |         41 |
    | 100124 |         41 |
    |  13323 |         42 |
    | 100123 |         42 |
    |  13373 |         43 |
    | 100173 |         43 |
    |  17373 |         44 |
    | 100323 |         44 |
    |  23323 |         45 |
    | 100373 |         45 |
    |  23373 |         46 |
    | 101117 |         46 |
    |  73373 |         47 |
    | 101124 |         47 |
    | 101123 |         48 |
    | 101173 |         49 |
    | 101323 |         50 |
    | 101373 |         51 |
    | 103323 |         52 |
    | 103373 |         53 |
    | 111373 |         54 |
    | 113323 |         55 |
    | 113373 |         56 |
    | 117373 |         57 |
    | 123323 |         58 |
    | 123373 |         59 |
    | 173373 |         60 |
    | 323373 |         61 |
    | 373373 |         62 |

*** German
    #+CALL: smallest_number(lang='German') :colnames yes

    #+RESULTS:
    |   numb | German |
    |--------+--------|
    |     11 |      3 |
    |      0 |      4 |
    |      1 |      4 |
    |      6 |      5 |
    |      7 |      6 |
    |     20 |      7 |
    |     13 |      8 |
    |    100 |     10 |
    |    200 |     11 |
    |    600 |     12 |
    |     21 |     13 |
    |    700 |     13 |
    |     22 |     14 |
    |   2000 |     14 |
    |     26 |     15 |
    |   6000 |     15 |
    |     27 |     16 |
    |    111 |     16 |
    |     37 |     17 |
    |    101 |     17 |
    |    106 |     18 |
    |    107 |     19 |
    |    120 |     20 |
    | 100000 |     20 |
    |    113 |     21 |
    | 200000 |     21 |
    |    213 |     22 |
    | 600000 |     22 |
    |    613 |     23 |
    | 100011 |     23 |
    |    713 |     24 |
    | 100001 |     24 |
    |   1600 |     25 |
    | 100006 |     25 |
    |    121 |     26 |
    | 100007 |     26 |
    |    122 |     27 |
    | 100020 |     27 |
    |    126 |     28 |
    | 100013 |     28 |
    |    127 |     29 |
    | 107000 |     29 |
    |    137 |     30 |
    | 100100 |     30 |
    |    237 |     31 |
    | 100200 |     31 |
    |    637 |     32 |
    | 100600 |     32 |
    |    737 |     33 |
    | 100021 |     33 |
    |   1713 |     34 |
    | 100022 |     34 |
    |   2713 |     35 |
    | 100026 |     35 |
    |   1121 |     36 |
    | 100027 |     36 |
    |   1122 |     37 |
    | 100037 |     37 |
    |   1126 |     38 |
    | 100113 |     38 |
    |   1127 |     39 |
    | 100213 |     39 |
    |   1137 |     40 |
    | 100613 |     40 |
    |   1237 |     41 |
    | 100713 |     41 |
    |   1637 |     42 |
    | 101026 |     42 |
    |   1737 |     43 |
    | 100121 |     43 |
    |   2737 |     44 |
    | 100122 |     44 |
    |   6737 |     45 |
    | 100126 |     45 |
    |   7737 |     46 |
    | 100127 |     46 |
    |  13637 |     47 |
    | 100137 |     47 |
    |  13737 |     48 |
    | 100237 |     48 |
    |  21127 |     49 |
    | 100637 |     49 |
    |  21137 |     50 |
    | 100737 |     50 |
    |  21237 |     51 |
    | 101122 |     51 |
    |  21637 |     52 |
    | 101126 |     52 |
    |  21737 |     53 |
    | 101127 |     53 |
    |  22737 |     54 |
    | 101137 |     54 |
    |  26737 |     55 |
    | 101237 |     55 |
    |  27737 |     56 |
    | 101637 |     56 |
    |  37737 |     57 |
    | 101737 |     57 |
    | 106737 |     58 |
    | 107737 |     59 |
    | 113637 |     60 |
    | 113737 |     61 |
    | 121127 |     62 |
    | 121137 |     63 |
    | 121237 |     64 |
    | 121637 |     65 |
    | 121737 |     66 |
    | 122737 |     67 |
    | 126737 |     68 |
    | 127737 |     69 |
    | 137737 |     70 |
    | 237737 |     71 |
    | 637737 |     72 |
    | 737737 |     73 |

*** Danish
    #+CALL: smallest_number(lang='Danish') :colnames yes

    #+RESULTS:
    |   numb | Danish |
    |--------+--------|
    |      1 |      2 |
    |      0 |      3 |
    |      3 |      3 |
    |      4 |      4 |
    |     18 |      5 |
    |     11 |      6 |
    |     13 |      7 |
    |     21 |      8 |
    |   1000 |      8 |
    |     23 |      9 |
    |    100 |      9 |
    |     24 |     10 |
    |    300 |     10 |
    |     31 |     11 |
    |    400 |     11 |
    |     33 |     12 |
    |   1001 |     12 |
    |     34 |     13 |
    |    101 |     13 |
    |     53 |     14 |
    |    103 |     14 |
    |     54 |     15 |
    |    104 |     15 |
    | 100000 |     15 |
    |     74 |     16 |
    |    118 |     16 |
    | 300000 |     16 |
    |    111 |     17 |
    | 400000 |     17 |
    |    113 |     18 |
    |    121 |     19 |
    | 100001 |     19 |
    |    123 |     20 |
    | 100003 |     20 |
    |    124 |     21 |
    | 100004 |     21 |
    |    131 |     22 |
    | 100018 |     22 |
    |    133 |     23 |
    | 100011 |     23 |
    |    134 |     24 |
    | 100013 |     24 |
    |    153 |     25 |
    | 100021 |     25 |
    |    154 |     26 |
    | 100023 |     26 |
    |    174 |     27 |
    | 100024 |     27 |
    |    374 |     28 |
    | 100031 |     28 |
    |    474 |     29 |
    | 100033 |     29 |
    |   1131 |     30 |
    | 100034 |     30 |
    |   1133 |     31 |
    | 100053 |     31 |
    |   1134 |     32 |
    | 100054 |     32 |
    |   1153 |     33 |
    | 100074 |     33 |
    |   1154 |     34 |
    | 100121 |     34 |
    |   1174 |     35 |
    | 100123 |     35 |
    |   1374 |     36 |
    | 100124 |     36 |
    |   1474 |     37 |
    | 100131 |     37 |
    |   3474 |     38 |
    | 100133 |     38 |
    |   4474 |     39 |
    | 100134 |     39 |
    |  11374 |     40 |
    | 100153 |     40 |
    |  11474 |     41 |
    | 100154 |     41 |
    |  13474 |     42 |
    | 100174 |     42 |
    |  21474 |     43 |
    | 100374 |     43 |
    |  23474 |     44 |
    | 100474 |     44 |
    |  24474 |     45 |
    | 101154 |     45 |
    |  31474 |     46 |
    | 101174 |     46 |
    |  33474 |     47 |
    | 101374 |     47 |
    |  34474 |     48 |
    | 101474 |     48 |
    |  53474 |     49 |
    | 103474 |     49 |
    |  54474 |     50 |
    | 104474 |     50 |
    |  74474 |     51 |
    | 111374 |     51 |
    | 111474 |     52 |
    | 113474 |     53 |
    | 121474 |     54 |
    | 123474 |     55 |
    | 124474 |     56 |
    | 131474 |     57 |
    | 133474 |     58 |
    | 134474 |     59 |
    | 153474 |     60 |
    | 154474 |     61 |
    | 174474 |     62 |
    | 374474 |     63 |
    | 474474 |     64 |

*** Dutch
    #+CALL: smallest_number(lang='Dutch') :colnames yes

    #+RESULTS:
    |   numb | Dutch |
    |--------+-------|
    |      0 |     3 |
    |      1 |     3 |
    |      2 |     4 |
    |      7 |     5 |
    |     12 |     6 |
    |     13 |     7 |
    |     14 |     8 |
    |     17 |     9 |
    |    100 |    10 |
    |     31 |    11 |
    |    200 |    11 |
    |     21 |    12 |
    |    700 |    12 |
    |     22 |    13 |
    |    101 |    13 |
    |     27 |    14 |
    |    102 |    14 |
    |     77 |    15 |
    |    107 |    15 |
    |    112 |    16 |
    |    113 |    17 |
    | 100000 |    17 |
    |    114 |    18 |
    | 200000 |    18 |
    |    117 |    19 |
    | 700000 |    19 |
    |    217 |    20 |
    | 101000 |    20 |
    |    131 |    21 |
    | 102000 |    21 |
    |    121 |    22 |
    | 100001 |    22 |
    |    122 |    23 |
    | 100002 |    23 |
    |    127 |    24 |
    | 100007 |    24 |
    |    177 |    25 |
    | 100012 |    25 |
    |    277 |    26 |
    | 100013 |    26 |
    |    777 |    27 |
    | 100014 |    27 |
    |   1114 |    28 |
    | 100017 |    28 |
    |   1117 |    29 |
    | 100100 |    29 |
    |   1217 |    30 |
    | 100031 |    30 |
    |   1131 |    31 |
    | 100021 |    31 |
    |   1121 |    32 |
    | 100022 |    32 |
    |   1122 |    33 |
    | 100027 |    33 |
    |   1127 |    34 |
    | 100077 |    34 |
    |   1177 |    35 |
    | 100114 |    35 |
    |   1277 |    36 |
    | 100117 |    36 |
    |   1777 |    37 |
    | 100217 |    37 |
    |   2777 |    38 |
    | 100131 |    38 |
    |   7777 |    39 |
    | 100121 |    39 |
    |  12777 |    40 |
    | 100122 |    40 |
    |  13777 |    41 |
    | 100127 |    41 |
    |  14777 |    42 |
    | 100177 |    42 |
    |  17777 |    43 |
    | 100277 |    43 |
    |  21177 |    44 |
    | 100777 |    44 |
    |  21277 |    45 |
    | 101177 |    45 |
    |  21777 |    46 |
    | 101277 |    46 |
    |  22777 |    47 |
    | 101777 |    47 |
    |  27777 |    48 |
    | 102777 |    48 |
    |  77777 |    49 |
    | 107777 |    49 |
    | 112777 |    50 |
    | 113777 |    51 |
    | 114777 |    52 |
    | 117777 |    53 |
    | 121177 |    54 |
    | 121277 |    55 |
    | 121777 |    56 |
    | 122777 |    57 |
    | 127777 |    58 |
    | 177777 |    59 |
    | 277777 |    60 |
    | 777777 |    61 |

*** Norwegian
    #+CALL: smallest_number(lang='norwegian') :colnames yes

    #+RESULTS:
    |   numb | norwegian |
    |--------+-----------|
    |      2 |         2 |
    |      1 |         3 |
    |      0 |         4 |
    |      4 |         4 |
    |     18 |         5 |
    |     11 |         6 |
    |     13 |         7 |
    |   2000 |         7 |
    |     24 |         8 |
    |    200 |         8 |
    |     33 |         9 |
    |    100 |         9 |
    |     34 |        10 |
    |    400 |        10 |
    |   2002 |        11 |
    |    201 |        12 |
    |    101 |        13 |
    | 200000 |        13 |
    |    103 |        14 |
    | 100000 |        14 |
    |    104 |        15 |
    | 400000 |        15 |
    |    118 |        16 |
    |    111 |        17 |
    | 200002 |        17 |
    |    113 |        18 |
    | 100002 |        18 |
    |    124 |        19 |
    | 100001 |        19 |
    |    133 |        20 |
    | 100004 |        20 |
    |    134 |        21 |
    | 100018 |        21 |
    |    434 |        22 |
    | 100011 |        22 |
    |   1104 |        23 |
    | 100013 |        23 |
    |   1118 |        24 |
    | 100024 |        24 |
    |   1111 |        25 |
    | 100033 |        25 |
    |   1113 |        26 |
    | 100034 |        26 |
    |   1124 |        27 |
    | 100101 |        27 |
    |   1133 |        28 |
    | 100103 |        28 |
    |   1134 |        29 |
    | 100104 |        29 |
    |   1434 |        30 |
    | 100118 |        30 |
    |   4434 |        31 |
    | 100111 |        31 |
    |  11134 |        32 |
    | 100113 |        32 |
    |  11434 |        33 |
    | 100124 |        33 |
    |  13434 |        34 |
    | 100133 |        34 |
    |  24434 |        35 |
    | 100134 |        35 |
    |  33434 |        36 |
    | 100434 |        36 |
    |  34434 |        37 |
    | 101124 |        37 |
    | 101133 |        38 |
    | 101134 |        39 |
    | 101434 |        40 |
    | 103434 |        41 |
    | 104434 |        42 |
    | 111134 |        43 |
    | 111434 |        44 |
    | 113434 |        45 |
    | 124434 |        46 |
    | 133434 |        47 |
    | 134434 |        48 |
    | 434434 |        49 |

*** Swedish
    #+CALL: smallest_number(lang='Swedish') :colnames yes

    #+RESULTS:
    |   numb | Swedish |
    |--------+---------|
    |      1 |       3 |
    |      0 |       4 |
    |      4 |       4 |
    |     18 |       5 |
    |     15 |       6 |
    |     13 |       7 |
    |     21 |       8 |
    |   1000 |       8 |
    |     24 |       9 |
    |    100 |       9 |
    |     34 |      10 |
    |    400 |      10 |
    |  15000 |      11 |
    |  13000 |      12 |
    |  21000 |      13 |
    |   1001 |      14 |
    | 100000 |      14 |
    |    101 |      15 |
    | 400000 |      15 |
    |    104 |      16 |
    |    118 |      17 |
    |    115 |      18 |
    |    113 |      19 |
    |    121 |      20 |
    | 100001 |      20 |
    |    124 |      21 |
    | 100004 |      21 |
    |    134 |      22 |
    | 100018 |      22 |
    |    434 |      23 |
    | 100015 |      23 |
    |   1104 |      24 |
    | 100013 |      24 |
    |   1118 |      25 |
    | 100021 |      25 |
    |   1115 |      26 |
    | 100024 |      26 |
    |   1113 |      27 |
    | 100034 |      27 |
    |   1121 |      28 |
    | 101018 |      28 |
    |   1124 |      29 |
    | 100101 |      29 |
    |   1134 |      30 |
    | 100104 |      30 |
    |   1434 |      31 |
    | 100118 |      31 |
    |   4434 |      32 |
    | 100115 |      32 |
    |  13124 |      33 |
    | 100113 |      33 |
    |  13134 |      34 |
    | 100121 |      34 |
    |  13434 |      35 |
    | 100124 |      35 |
    |  21434 |      36 |
    | 100134 |      36 |
    |  24434 |      37 |
    | 100434 |      37 |
    |  34434 |      38 |
    | 101115 |      38 |
    | 101113 |      39 |
    | 101121 |      40 |
    | 101124 |      41 |
    | 101134 |      42 |
    | 101434 |      43 |
    | 104434 |      44 |
    | 113124 |      45 |
    | 113134 |      46 |
    | 113434 |      47 |
    | 121434 |      48 |
    | 124434 |      49 |
    | 134434 |      50 |
    | 434434 |      51 |

*** Spanish
    #+CALL: smallest_number(lang='Spanish') :colnames yes

    #+RESULTS:
    |   numb | Spanish |
    |--------+---------|
    |      1 |       3 |
    |   1000 |       3 |
    |      0 |       4 |
    |      3 |       4 |
    |    100 |       4 |
    |      5 |       5 |
    |      4 |       6 |
    |   2000 |       6 |
    |     14 |       7 |
    |   1002 |       7 |
    | 100000 |       7 |
    |     40 |       8 |
    |   1003 |       8 |
    | 100001 |       8 |
    |     16 |       9 |
    |    101 |       9 |
    |     17 |      10 |
    |    103 |      10 |
    |     25 |      11 |
    |    105 |      11 |
    | 100002 |      11 |
    |     24 |      12 |
    |    104 |      12 |
    | 100003 |      12 |
    |     35 |      13 |
    |    114 |      13 |
    | 100005 |      13 |
    |     34 |      14 |
    |    140 |      14 |
    | 100004 |      14 |
    |     44 |      15 |
    |    116 |      15 |
    | 100014 |      15 |
    |     54 |      16 |
    |    117 |      16 |
    | 100040 |      16 |
    |    125 |      17 |
    | 100016 |      17 |
    |    124 |      18 |
    | 100017 |      18 |
    |    135 |      19 |
    | 100025 |      19 |
    |    134 |      20 |
    | 100024 |      20 |
    |    144 |      21 |
    | 100035 |      21 |
    |    154 |      22 |
    | 100034 |      22 |
    |    235 |      23 |
    | 100044 |      23 |
    |    234 |      24 |
    | 100054 |      24 |
    |    244 |      25 |
    | 100124 |      25 |
    |    254 |      26 |
    | 100135 |      26 |
    |    354 |      27 |
    | 100134 |      27 |
    |    444 |      28 |
    | 100144 |      28 |
    |    454 |      29 |
    | 100154 |      29 |
    |   1354 |      30 |
    | 100235 |      30 |
    |   1444 |      31 |
    | 100234 |      31 |
    |   1454 |      32 |
    | 100244 |      32 |
    |   2354 |      33 |
    | 100254 |      33 |
    |   2444 |      34 |
    | 100354 |      34 |
    |   2454 |      35 |
    | 100444 |      35 |
    |   3454 |      36 |
    | 100454 |      36 |
    |   4444 |      37 |
    | 101244 |      37 |
    |   4454 |      38 |
    | 101254 |      38 |
    |  14454 |      39 |
    | 101354 |      39 |
    |  16444 |      40 |
    | 101444 |      40 |
    |  16454 |      41 |
    | 101454 |      41 |
    |  17454 |      42 |
    | 103454 |      42 |
    |  24444 |      43 |
    | 104444 |      43 |
    |  24454 |      44 |
    | 104454 |      44 |
    |  34444 |      45 |
    | 114454 |      45 |
    |  34454 |      46 |
    | 116444 |      46 |
    |  44454 |      47 |
    | 116454 |      47 |
    |  54454 |      48 |
    | 117454 |      48 |
    | 124444 |      49 |
    | 124454 |      50 |
    | 134444 |      51 |
    | 134454 |      52 |
    | 144454 |      53 |
    | 154454 |      54 |
    | 234444 |      55 |
    | 234454 |      56 |
    | 244454 |      57 |
    | 254454 |      58 |
    | 354454 |      59 |
    | 444454 |      60 |
    | 454454 |      61 |

*** Catalan
    #+CALL: smallest_number(lang='Catalan') :colnames yes

    #+RESULTS:
    |   numb | Catalan |
    |--------+---------|
    |      1 |       2 |
    |      2 |       3 |
    |   1000 |       3 |
    |      0 |       4 |
    |      3 |       4 |
    |    100 |       4 |
    |     12 |       5 |
    |      4 |       6 |
    |    101 |       6 |
    |     14 |       7 |
    |    102 |       7 |
    | 100000 |       7 |
    |     22 |       8 |
    |    103 |       8 |
    | 100001 |       8 |
    |     23 |       9 |
    |    112 |       9 |
    | 101000 |       9 |
    |     32 |      10 |
    |    104 |      10 |
    | 101001 |      10 |
    |     24 |      11 |
    |    114 |      11 |
    | 100002 |      11 |
    |     35 |      12 |
    |    122 |      12 |
    | 100003 |      12 |
    |     34 |      13 |
    |    123 |      13 |
    | 100012 |      13 |
    |     45 |      14 |
    |    132 |      14 |
    | 100004 |      14 |
    |     44 |      15 |
    |    124 |      15 |
    | 100014 |      15 |
    |    135 |      16 |
    | 100022 |      16 |
    |    134 |      17 |
    | 100023 |      17 |
    |    145 |      18 |
    | 100032 |      18 |
    |    144 |      19 |
    | 100024 |      19 |
    |    234 |      20 |
    | 100035 |      20 |
    |    245 |      21 |
    | 100034 |      21 |
    |    244 |      22 |
    | 100045 |      22 |
    |    344 |      23 |
    | 100044 |      23 |
    |    445 |      24 |
    | 100134 |      24 |
    |    444 |      25 |
    | 100145 |      25 |
    |   1344 |      26 |
    | 100144 |      26 |
    |   1445 |      27 |
    | 100234 |      27 |
    |   1444 |      28 |
    | 100245 |      28 |
    |   2344 |      29 |
    | 100244 |      29 |
    |   2445 |      30 |
    | 100344 |      30 |
    |   2444 |      31 |
    | 100445 |      31 |
    |   3444 |      32 |
    | 100444 |      32 |
    |   4445 |      33 |
    | 101445 |      33 |
    |   4444 |      34 |
    | 101444 |      34 |
    |  14444 |      35 |
    | 102444 |      35 |
    |  22444 |      36 |
    | 103444 |      36 |
    |  23444 |      37 |
    | 104445 |      37 |
    |  24445 |      38 |
    | 104444 |      38 |
    |  24444 |      39 |
    | 114444 |      39 |
    |  34445 |      40 |
    | 122444 |      40 |
    |  34444 |      41 |
    | 123444 |      41 |
    |  44445 |      42 |
    | 124445 |      42 |
    |  44444 |      43 |
    | 124444 |      43 |
    | 134445 |      44 |
    | 134444 |      45 |
    | 144445 |      46 |
    | 144444 |      47 |
    | 234444 |      48 |
    | 244445 |      49 |
    | 244444 |      50 |
    | 344444 |      51 |
    | 444445 |      52 |
    | 444444 |      53 |

*** Portuguese Br
    #+CALL: smallest_number(lang='portuguese_br') :colnames yes

    #+RESULTS:
    |   numb | portuguese_br |
    |--------+---------------|
    |      1 |             2 |
    |     10 |             3 |
    |    100 |             3 |
    |      0 |             4 |
    |      2 |             4 |
    |      5 |             5 |
    |   1000 |             5 |
    |      4 |             6 |
    |  10000 |             6 |
    | 100000 |             6 |
    |     18 |             7 |
    |   2000 |             7 |
    |     14 |             8 |
    |    101 |             8 |
    |     16 |             9 |
    |    110 |             9 |
    | 100001 |             9 |
    |     22 |            10 |
    |    102 |            10 |
    | 100010 |            10 |
    |     25 |            11 |
    |    105 |            11 |
    | 100002 |            11 |
    |     24 |            12 |
    |    104 |            12 |
    | 100005 |            12 |
    |     34 |            13 |
    |    118 |            13 |
    | 100004 |            13 |
    |     45 |            14 |
    |    114 |            14 |
    | 100018 |            14 |
    |     44 |            15 |
    |    116 |            15 |
    | 100014 |            15 |
    |     54 |            16 |
    |    122 |            16 |
    | 100016 |            16 |
    |    125 |            17 |
    | 100022 |            17 |
    |    124 |            18 |
    | 100025 |            18 |
    |    134 |            19 |
    | 100024 |            19 |
    |    145 |            20 |
    | 100034 |            20 |
    |    144 |            21 |
    | 100045 |            21 |
    |    154 |            22 |
    | 100044 |            22 |
    |    245 |            23 |
    | 100054 |            23 |
    |    244 |            24 |
    | 100124 |            24 |
    |    254 |            25 |
    | 100134 |            25 |
    |    354 |            26 |
    | 100145 |            26 |
    |    445 |            27 |
    | 100144 |            27 |
    |    444 |            28 |
    | 100154 |            28 |
    |    454 |            29 |
    | 100245 |            29 |
    |   1254 |            30 |
    | 100244 |            30 |
    |   1354 |            31 |
    | 100254 |            31 |
    |   1445 |            32 |
    | 100354 |            32 |
    |   1444 |            33 |
    | 100445 |            33 |
    |   1454 |            34 |
    | 100444 |            34 |
    |   2444 |            35 |
    | 100454 |            35 |
    |   2454 |            36 |
    | 101254 |            36 |
    |   4444 |            37 |
    | 101354 |            37 |
    |   4454 |            38 |
    | 101445 |            38 |
    |  14444 |            39 |
    | 101444 |            39 |
    |  14454 |            40 |
    | 101454 |            40 |
    |  16454 |            41 |
    | 102444 |            41 |
    |  22454 |            42 |
    | 102454 |            42 |
    |  24444 |            43 |
    | 104444 |            43 |
    |  24454 |            44 |
    | 104454 |            44 |
    |  34454 |            45 |
    | 114444 |            45 |
    |  44444 |            46 |
    | 114454 |            46 |
    |  44454 |            47 |
    | 116454 |            47 |
    |  54454 |            48 |
    | 122454 |            48 |
    | 124444 |            49 |
    | 124454 |            50 |
    | 134454 |            51 |
    | 144444 |            52 |
    | 144454 |            53 |
    | 154454 |            54 |
    | 244444 |            55 |
    | 244454 |            56 |
    | 254454 |            57 |
    | 354454 |            58 |
    | 444444 |            59 |
    | 444454 |            60 |
    | 454454 |            61 |

*** Portuguese Pt
    #+CALL: smallest_number(lang='portuguese_pt') :colnames yes

    #+RESULTS:
    |   numb | portuguese_pt |
    |--------+---------------|
    |      1 |             2 |
    |     10 |             3 |
    |    100 |             3 |
    |      0 |             4 |
    |      2 |             4 |
    |      5 |             5 |
    |   1000 |             5 |
    |      4 |             6 |
    |   1001 |             6 |
    | 100000 |             6 |
    |     14 |             7 |
    |   2000 |             7 |
    | 100001 |             7 |
    |     19 |             8 |
    |    101 |             8 |
    |     16 |             9 |
    |    110 |             9 |
    |     22 |            10 |
    |    102 |            10 |
    | 100010 |            10 |
    |     25 |            11 |
    |    105 |            11 |
    | 100002 |            11 |
    |     24 |            12 |
    |    104 |            12 |
    | 100005 |            12 |
    |     34 |            13 |
    |    114 |            13 |
    | 100004 |            13 |
    |     45 |            14 |
    |    119 |            14 |
    | 100014 |            14 |
    |     44 |            15 |
    |    116 |            15 |
    | 100019 |            15 |
    |     54 |            16 |
    |    122 |            16 |
    | 100016 |            16 |
    |    125 |            17 |
    | 100022 |            17 |
    |    124 |            18 |
    | 100025 |            18 |
    |    134 |            19 |
    | 100024 |            19 |
    |    145 |            20 |
    | 100034 |            20 |
    |    144 |            21 |
    | 100045 |            21 |
    |    154 |            22 |
    | 100044 |            22 |
    |    245 |            23 |
    | 100054 |            23 |
    |    244 |            24 |
    | 100124 |            24 |
    |    254 |            25 |
    | 100134 |            25 |
    |    354 |            26 |
    | 100145 |            26 |
    |    445 |            27 |
    | 100144 |            27 |
    |    444 |            28 |
    | 100154 |            28 |
    |    454 |            29 |
    | 100245 |            29 |
    |   1254 |            30 |
    | 100244 |            30 |
    |   1354 |            31 |
    | 100254 |            31 |
    |   1445 |            32 |
    | 100354 |            32 |
    |   1444 |            33 |
    | 100445 |            33 |
    |   1454 |            34 |
    | 100444 |            34 |
    |   2444 |            35 |
    | 100454 |            35 |
    |   2454 |            36 |
    | 101254 |            36 |
    |   4444 |            37 |
    | 101354 |            37 |
    |   4454 |            38 |
    | 101445 |            38 |
    |  14454 |            39 |
    | 101444 |            39 |
    |  16444 |            40 |
    | 101454 |            40 |
    |  16454 |            41 |
    | 102444 |            41 |
    |  22454 |            42 |
    | 102454 |            42 |
    |  24444 |            43 |
    | 104444 |            43 |
    |  24454 |            44 |
    | 104454 |            44 |
    |  34454 |            45 |
    | 114454 |            45 |
    |  44444 |            46 |
    | 116444 |            46 |
    |  44454 |            47 |
    | 116454 |            47 |
    |  54454 |            48 |
    | 122454 |            48 |
    | 124444 |            49 |
    | 124454 |            50 |
    | 134454 |            51 |
    | 144444 |            52 |
    | 144454 |            53 |
    | 154454 |            54 |
    | 244444 |            55 |
    | 244454 |            56 |
    | 254454 |            57 |
    | 354454 |            58 |
    | 444444 |            59 |
    | 444454 |            60 |
    | 454454 |            61 |

*** French Ch
    #+CALL: smallest_number(lang='french_ch') :colnames yes

    #+RESULTS:
    |   numb | french_ch |
    |--------+-----------|
    |      1 |         2 |
    |      6 |         3 |
    |      0 |         4 |
    |      2 |         4 |
    |    100 |         4 |
    |      3 |         5 |
    |   1000 |         5 |
    |      4 |         6 |
    |    101 |         6 |
    |     17 |         7 |
    |    106 |         7 |
    |     14 |         8 |
    |    102 |         8 |
    |     21 |         9 |
    |    103 |         9 |
    | 100000 |         9 |
    |     23 |        10 |
    |    104 |        10 |
    |     24 |        11 |
    |    117 |        11 |
    | 100001 |        11 |
    |     34 |        12 |
    |    114 |        12 |
    | 100006 |        12 |
    |     43 |        13 |
    |    121 |        13 |
    | 100002 |        13 |
    |     44 |        14 |
    |    123 |        14 |
    | 100003 |        14 |
    |     54 |        15 |
    |    124 |        15 |
    | 100004 |        15 |
    |    134 |        16 |
    | 100017 |        16 |
    |    143 |        17 |
    | 100014 |        17 |
    |    144 |        18 |
    | 100021 |        18 |
    |    154 |        19 |
    | 100023 |        19 |
    |    234 |        20 |
    | 100024 |        20 |
    |    243 |        21 |
    | 100034 |        21 |
    |    244 |        22 |
    | 100043 |        22 |
    |    254 |        23 |
    | 100044 |        23 |
    |    354 |        24 |
    | 100054 |        24 |
    |    454 |        25 |
    | 100134 |        25 |
    |   1243 |        26 |
    | 100143 |        26 |
    |   1244 |        27 |
    | 100144 |        27 |
    |   1254 |        28 |
    | 100154 |        28 |
    |   1354 |        29 |
    | 100234 |        29 |
    |   1454 |        30 |
    | 100243 |        30 |
    |   2244 |        31 |
    | 100244 |        31 |
    |   2254 |        32 |
    | 100254 |        32 |
    |   2354 |        33 |
    | 100354 |        33 |
    |   2454 |        34 |
    | 100454 |        34 |
    |   3454 |        35 |
    | 101354 |        35 |
    |   4454 |        36 |
    | 101454 |        36 |
    |  14354 |        37 |
    | 102354 |        37 |
    |  14454 |        38 |
    | 102454 |        38 |
    |  21454 |        39 |
    | 103454 |        39 |
    |  23454 |        40 |
    | 104454 |        40 |
    |  24454 |        41 |
    | 114354 |        41 |
    |  34454 |        42 |
    | 114454 |        42 |
    |  43454 |        43 |
    | 121454 |        43 |
    |  44454 |        44 |
    | 123454 |        44 |
    |  54454 |        45 |
    | 124454 |        45 |
    | 134454 |        46 |
    | 143454 |        47 |
    | 144454 |        48 |
    | 154454 |        49 |
    | 234454 |        50 |
    | 243454 |        51 |
    | 244454 |        52 |
    | 254454 |        53 |
    | 354454 |        54 |
    | 454454 |        55 |

*** French Fr
    #+CALL: smallest_number(lang='french_fr') :colnames yes

    #+RESULTS:
    |   numb | french_fr |
    |--------+-----------|
    |      1 |         2 |
    |      6 |         3 |
    |      0 |         4 |
    |      2 |         4 |
    |    100 |         4 |
    |      3 |         5 |
    |   1000 |         5 |
    |      4 |         6 |
    |    101 |         6 |
    |     17 |         7 |
    |    106 |         7 |
    |     14 |         8 |
    |    102 |         8 |
    |     21 |         9 |
    |    103 |         9 |
    | 100000 |         9 |
    |     23 |        10 |
    |    104 |        10 |
    |     24 |        11 |
    |    117 |        11 |
    | 100001 |        11 |
    |     34 |        12 |
    |    114 |        12 |
    | 100006 |        12 |
    |     43 |        13 |
    |    121 |        13 |
    | 100002 |        13 |
    |     44 |        14 |
    |    123 |        14 |
    | 100003 |        14 |
    |     54 |        15 |
    |    124 |        15 |
    | 100004 |        15 |
    |     74 |        16 |
    |    134 |        16 |
    | 100017 |        16 |
    |     84 |        17 |
    |    143 |        17 |
    | 100014 |        17 |
    |     97 |        18 |
    |    144 |        18 |
    | 100021 |        18 |
    |     94 |        19 |
    |    154 |        19 |
    | 100023 |        19 |
    |    174 |        20 |
    | 100024 |        20 |
    |    184 |        21 |
    | 100034 |        21 |
    |    197 |        22 |
    | 100043 |        22 |
    |    194 |        23 |
    | 100044 |        23 |
    |    274 |        24 |
    | 100054 |        24 |
    |    284 |        25 |
    | 100074 |        25 |
    |    297 |        26 |
    | 100084 |        26 |
    |    294 |        27 |
    | 100097 |        27 |
    |    394 |        28 |
    | 100094 |        28 |
    |    494 |        29 |
    | 100174 |        29 |
    |   1284 |        30 |
    | 100184 |        30 |
    |   1297 |        31 |
    | 100197 |        31 |
    |   1294 |        32 |
    | 100194 |        32 |
    |   1394 |        33 |
    | 100274 |        33 |
    |   1494 |        34 |
    | 100284 |        34 |
    |   2297 |        35 |
    | 100297 |        35 |
    |   2294 |        36 |
    | 100294 |        36 |
    |   2394 |        37 |
    | 100394 |        37 |
    |   2494 |        38 |
    | 100494 |        38 |
    |   3494 |        39 |
    | 101394 |        39 |
    |   4494 |        40 |
    | 101494 |        40 |
    |  14394 |        41 |
    | 102394 |        41 |
    |  14494 |        42 |
    | 102494 |        42 |
    |  21494 |        43 |
    | 103494 |        43 |
    |  23494 |        44 |
    | 104494 |        44 |
    |  24494 |        45 |
    | 114394 |        45 |
    |  34494 |        46 |
    | 114494 |        46 |
    |  43494 |        47 |
    | 121494 |        47 |
    |  44494 |        48 |
    | 123494 |        48 |
    |  54494 |        49 |
    | 124494 |        49 |
    |  74494 |        50 |
    | 134494 |        50 |
    |  84494 |        51 |
    | 143494 |        51 |
    |  94394 |        52 |
    | 144494 |        52 |
    |  94494 |        53 |
    | 154494 |        53 |
    | 174494 |        54 |
    | 184494 |        55 |
    | 194394 |        56 |
    | 194494 |        57 |
    | 274494 |        58 |
    | 284494 |        59 |
    | 294394 |        60 |
    | 294494 |        61 |
    | 394494 |        62 |
    | 494494 |        63 |

*** Italian
    #+CALL: smallest_number(lang='italian') :colnames yes

    #+RESULTS:
    |   numb | italian |
    |--------+---------|
    |      1 |       3 |
    |      0 |       4 |
    |      8 |       4 |
    |      7 |       5 |
    |    100 |       5 |
    |      5 |       6 |
    |      4 |       7 |
    |   2000 |       7 |
    |     15 |       8 |
    |    101 |       8 |
    |     19 |       9 |
    |    108 |       9 |
    | 100000 |       9 |
    |     17 |      10 |
    |    107 |      10 |
    |     14 |      11 |
    |    105 |      11 |
    |     24 |      12 |
    |    104 |      12 |
    | 100001 |      12 |
    |     34 |      13 |
    |    115 |      13 |
    | 100008 |      13 |
    |     45 |      14 |
    |    119 |      14 |
    | 100007 |      14 |
    |     44 |      15 |
    |    117 |      15 |
    | 100005 |      15 |
    |     54 |      16 |
    |    114 |      16 |
    | 100004 |      16 |
    |    124 |      17 |
    | 100015 |      17 |
    |    134 |      18 |
    | 100019 |      18 |
    |    145 |      19 |
    | 100017 |      19 |
    |    144 |      20 |
    | 100014 |      20 |
    |    154 |      21 |
    | 100024 |      21 |
    |    245 |      22 |
    | 100034 |      22 |
    |    244 |      23 |
    | 100045 |      23 |
    |    254 |      24 |
    | 100044 |      24 |
    |    434 |      25 |
    | 100054 |      25 |
    |    445 |      26 |
    | 100124 |      26 |
    |    444 |      27 |
    | 100134 |      27 |
    |    454 |      28 |
    | 100145 |      28 |
    |   1254 |      29 |
    | 100144 |      29 |
    |   1434 |      30 |
    | 100154 |      30 |
    |   1445 |      31 |
    | 100245 |      31 |
    |   1444 |      32 |
    | 100244 |      32 |
    |   1454 |      33 |
    | 100254 |      33 |
    |   2444 |      34 |
    | 100434 |      34 |
    |   2454 |      35 |
    | 100445 |      35 |
    |   4434 |      36 |
    | 100444 |      36 |
    |   4445 |      37 |
    | 100454 |      37 |
    |   4444 |      38 |
    | 101445 |      38 |
    |   4454 |      39 |
    | 101444 |      39 |
    |  14434 |      40 |
    | 101454 |      40 |
    |  14445 |      41 |
    | 104434 |      41 |
    |  14444 |      42 |
    | 104445 |      42 |
    |  14454 |      43 |
    | 104444 |      43 |
    |  24454 |      44 |
    | 104454 |      44 |
    |  34454 |      45 |
    | 114434 |      45 |
    |  44444 |      46 |
    | 114445 |      46 |
    |  44454 |      47 |
    | 114444 |      47 |
    |  54454 |      48 |
    | 114454 |      48 |
    | 124454 |      49 |
    | 134454 |      50 |
    | 144444 |      51 |
    | 144454 |      52 |
    | 154454 |      53 |
    | 244444 |      54 |
    | 244454 |      55 |
    | 254454 |      56 |
    | 434454 |      57 |
    | 444444 |      58 |
    | 444454 |      59 |
    | 454454 |      60 |

*** Finnish
    #+CALL: smallest_number(lang='finnish') :colnames yes

    #+RESULTS:
    |   numb | finnish |
    |--------+---------|
    |      1 |       4 |
    |    100 |       4 |
    |      0 |       5 |
    |      2 |       5 |
    |   1000 |       5 |
    |      9 |       8 |
    |    101 |       8 |
    |      7 |       9 |
    |    102 |       9 |
    |     11 |      10 |
    |    200 |      10 |
    |     12 |      11 |
    | 100000 |      11 |
    |    109 |      12 |
    |     20 |      13 |
    |    107 |      13 |
    |     19 |      14 |
    |    111 |      14 |
    |     17 |      15 |
    |    112 |      15 |
    | 100001 |      15 |
    |     90 |      16 |
    |   1012 |      16 |
    | 100002 |      16 |
    |     21 |      17 |
    |    120 |      17 |
    | 200000 |      17 |
    |     22 |      18 |
    |    119 |      18 |
    |    117 |      19 |
    | 100009 |      19 |
    |     91 |      20 |
    |    190 |      20 |
    | 100007 |      20 |
    |     29 |      21 |
    |    121 |      21 |
    | 100011 |      21 |
    |     27 |      22 |
    |    122 |      22 |
    | 100012 |      22 |
    |    220 |      23 |
    | 100109 |      23 |
    |     99 |      24 |
    |    191 |      24 |
    | 100020 |      24 |
    |     79 |      25 |
    |    129 |      25 |
    | 100019 |      25 |
    |     77 |      26 |
    |    127 |      26 |
    | 100017 |      26 |
    |    221 |      27 |
    | 100090 |      27 |
    |    199 |      28 |
    | 100021 |      28 |
    |    179 |      29 |
    | 100022 |      29 |
    |    177 |      30 |
    | 100117 |      30 |
    |    229 |      31 |
    | 100091 |      31 |
    |    227 |      32 |
    | 100029 |      32 |
    |    991 |      33 |
    | 100027 |      33 |
    |    299 |      34 |
    | 100220 |      34 |
    |    279 |      35 |
    | 100099 |      35 |
    |    277 |      36 |
    | 100079 |      36 |
    |    999 |      37 |
    | 100077 |      37 |
    |    799 |      38 |
    | 100221 |      38 |
    |    779 |      39 |
    | 100199 |      39 |
    |    777 |      40 |
    | 100179 |      40 |
    |   1277 |      41 |
    | 100177 |      41 |
    |   1999 |      42 |
    | 100229 |      42 |
    |   1799 |      43 |
    | 100227 |      43 |
    |   1779 |      44 |
    | 100991 |      44 |
    |   1777 |      45 |
    | 100299 |      45 |
    |   2299 |      46 |
    | 100279 |      46 |
    |   2279 |      47 |
    | 100277 |      47 |
    |   2277 |      48 |
    | 100999 |      48 |
    |   2999 |      49 |
    | 100799 |      49 |
    |   2799 |      50 |
    | 100779 |      50 |
    |   2779 |      51 |
    | 100777 |      51 |
    |   2777 |      52 |
    | 101999 |      52 |
    |   7999 |      53 |
    | 101799 |      53 |
    |   7799 |      54 |
    | 101779 |      54 |
    |   7779 |      55 |
    | 101777 |      55 |
    |   7777 |      56 |
    | 102777 |      56 |
    |  11777 |      57 |
    | 107999 |      57 |
    |  12777 |      58 |
    | 107799 |      58 |
    |  17999 |      59 |
    | 107779 |      59 |
    |  17799 |      60 |
    | 107777 |      60 |
    |  17779 |      61 |
    | 111777 |      61 |
    |  17777 |      62 |
    | 112777 |      62 |
    |  21779 |      63 |
    | 117999 |      63 |
    |  21777 |      64 |
    | 117799 |      64 |
    |  22777 |      65 |
    | 117779 |      65 |
    |  27999 |      66 |
    | 117777 |      66 |
    |  27799 |      67 |
    | 121779 |      67 |
    |  27779 |      68 |
    | 121777 |      68 |
    |  27777 |      69 |
    | 122777 |      69 |
    |  77999 |      70 |
    | 127999 |      70 |
    |  77799 |      71 |
    | 127799 |      71 |
    |  77779 |      72 |
    | 127779 |      72 |
    |  77777 |      73 |
    | 127777 |      73 |
    | 177999 |      74 |
    | 177799 |      75 |
    | 177779 |      76 |
    | 177777 |      77 |
    | 227779 |      78 |
    | 227777 |      79 |
    | 277999 |      80 |
    | 277799 |      81 |
    | 277779 |      82 |
    | 277777 |      83 |
    | 777999 |      84 |
    | 777799 |      85 |
    | 777779 |      86 |
    | 777777 |      87 |

*** Esperanto
    #+CALL: smallest_number(lang='esperanto') :colnames yes

    #+RESULTS:
    |   numb | esperanto |
    |--------+-----------|
    |      2 |         2 |
    |      1 |         3 |
    |   1000 |         3 |
    |      0 |         4 |
    |      4 |         4 |
    |    100 |         4 |
    |     12 |         5 |
    |   1002 |         5 |
    |     11 |         6 |
    |    102 |         6 |
    |     14 |         7 |
    |    101 |         7 |
    | 100000 |         7 |
    |     21 |         8 |
    |    104 |         8 |
    |     24 |         9 |
    |    112 |         9 |
    | 100002 |         9 |
    |     34 |        10 |
    |    111 |        10 |
    | 100001 |        10 |
    |     44 |        11 |
    |    114 |        11 |
    | 100004 |        11 |
    |    121 |        12 |
    | 100012 |        12 |
    |    124 |        13 |
    | 100011 |        13 |
    |    134 |        14 |
    | 100014 |        14 |
    |    144 |        15 |
    | 100021 |        15 |
    |    234 |        16 |
    | 100024 |        16 |
    |    244 |        17 |
    | 100034 |        17 |
    |    344 |        18 |
    | 100044 |        18 |
    |    444 |        19 |
    | 100121 |        19 |
    |   1244 |        20 |
    | 100124 |        20 |
    |   1344 |        21 |
    | 100134 |        21 |
    |   1444 |        22 |
    | 100144 |        22 |
    |   2344 |        23 |
    | 100234 |        23 |
    |   2444 |        24 |
    | 100244 |        24 |
    |   3444 |        25 |
    | 100344 |        25 |
    |   4444 |        26 |
    | 100444 |        26 |
    |  11344 |        27 |
    | 101244 |        27 |
    |  11444 |        28 |
    | 101344 |        28 |
    |  14444 |        29 |
    | 101444 |        29 |
    |  21444 |        30 |
    | 104444 |        30 |
    |  24444 |        31 |
    | 111344 |        31 |
    |  34444 |        32 |
    | 111444 |        32 |
    |  44444 |        33 |
    | 114444 |        33 |
    | 121444 |        34 |
    | 124444 |        35 |
    | 134444 |        36 |
    | 144444 |        37 |
    | 234444 |        38 |
    | 244444 |        39 |
    | 344444 |        40 |
    | 444444 |        41 |

*** Japanese
    #+CALL: smallest_number(lang='japanese') :colnames yes

    #+RESULTS:
    |   numb | japanese |
    |--------+----------|
    |      2 |        2 |
    |      0 |        3 |
    |      3 |        3 |
    |   1000 |        3 |
    |      1 |        4 |
    |      8 |        5 |
    |    100 |        5 |
    | 100000 |        5 |
    |     11 |        6 |
    |   1003 |        6 |
    |     18 |        7 |
    |    102 |        7 |
    | 100002 |        7 |
    |     21 |        8 |
    |    103 |        8 |
    | 100003 |        8 |
    |     28 |        9 |
    |    101 |        9 |
    | 100001 |        9 |
    |     38 |       10 |
    |    108 |       10 |
    | 100008 |       10 |
    |     68 |       11 |
    |    111 |       11 |
    | 100011 |       11 |
    |     88 |       12 |
    |    118 |       12 |
    | 100018 |       12 |
    |    121 |       13 |
    | 100021 |       13 |
    |    128 |       14 |
    | 100028 |       14 |
    |    138 |       15 |
    | 100038 |       15 |
    |    168 |       16 |
    | 100068 |       16 |
    |    188 |       17 |
    | 100088 |       17 |
    |    268 |       18 |
    | 100121 |       18 |
    |    288 |       19 |
    | 100128 |       19 |
    |    388 |       20 |
    | 100138 |       20 |
    |    788 |       21 |
    | 100168 |       21 |
    |   1288 |       22 |
    | 100188 |       22 |
    |   1388 |       23 |
    | 100268 |       23 |
    |   1788 |       24 |
    | 100288 |       24 |
    |   2388 |       25 |
    | 100388 |       25 |
    |   2788 |       26 |
    | 100788 |       26 |
    |   3788 |       27 |
    | 101288 |       27 |
    |   6788 |       28 |
    | 101388 |       28 |
    |  11288 |       29 |
    | 101788 |       29 |
    |  11388 |       30 |
    | 102388 |       30 |
    |  11788 |       31 |
    | 102788 |       31 |
    |  12388 |       32 |
    | 103788 |       32 |
    |  12788 |       33 |
    | 106788 |       33 |
    |  13788 |       34 |
    | 112388 |       34 |
    |  16788 |       35 |
    | 112788 |       35 |
    |  86788 |       36 |
    | 113788 |       36 |
    | 116788 |       37 |
    | 186788 |       38 |
    | 216788 |       39 |
    | 286788 |       40 |
    | 386788 |       41 |
    | 686788 |       42 |
    | 886788 |       43 |
** Finding Chains
   The following SQLite query was used to find the minimum starting value for
   every path length in each of the tables. Nodes that are part of a loop have a
   path length of zero. Esperanto, Norwegian, and Swedish have the shortest,
   maximum path lengths at three connections each.  Italian has the longest
   maximum path length with eight connections.

   In the SQLite code, /$lang/ is an Org Babel variable that is set before the
   code block is sent to SQLite. It is set to a column name, such as
   /English_us/. These fields contain the spelling lengths.

   The /nodes/, /iterations/, and /trans_closure/ common table expressions
   (CTEs) are queries copied from the [[*Loops][Loops]] section. The /non_loop_members/
   CTE returns a table where the root number fields are removed.

   The /path_group/ CTE is similar to the /itineraries/ CTE in my previous
   thread post. The /strt/ field is used to group tree traversals starting
   from a node.  It essentially proceeds like the /trans_closure/ CTE, but the
   starting value is stored in /strt/, and the intermediate length value,
   /numb/, is also kept.

   The /smallest_path_lengths/ CTE takes /path_group/'s output and
   groups path itineraries by their starting node, /strt/.  It counts
   the number of entries (/x/) in each group, returning the path
   length, /p_length/, and starting value for each group. Numbers with
   equal path lengths (/x/) are grouped together, and the smallest
   starting value out of each group is taken.

   The final query joins the /path_group/ table with the
   /smallest_path_lengths/ table to get the path members from /path_group/ for paths
   starting with the /strt/ values found by
   /smallest_path_lengths/. The node number and destination are
   formatted to make it easier to insert into Graphviz code.

   This query required 30 seconds of running time on my computer.  The
   majority of which was spent on the last two parts of the query.

   | Query Part            | Running Total Time |   Time |
   |-----------------------+--------------------+--------|
   | nodes                 |              0.087 |  0.087 |
   | trans_closure         |              0.087 |     0. |
   | non_loop_members      |              0.087 |     0. |
   | path_group            |              1.055 |  0.968 |
   | smallest_path_lengths |             12.253 | 11.198 |
   | final query           |             30.698 | 18.445 |

   #+NAME:disatnce_to_loop
   #+BEGIN_SRC sqlite :db sql-number-length-dag/number-spelling-length.db :colnames no :var lang='English_us'
-- .timer ON
WITH RECURSIVE
nodes(numb, len) AS (
    SELECT numb, $lang AS len
    FROM number_lengths
    WHERE numb <= (SELECT MAX($lang) FROM number_lengths)
),

iterations(itter) AS (
SELECT(SELECT COUNT(*) FROM nodes) * (SELECT COUNT(*) FROM nodes)
),

trans_closure(itter, numb, len) AS (
    SELECT 0 AS itter, numb, len FROM nodes
    UNION ALL
    SELECT itter + 1, A.numb AS numb, B.len AS len
    FROM trans_closure AS A JOIN nodes AS B
    ON A.len = B.numb
    WHERE A.itter < (SELECT itter FROM iterations)
    ORDER BY 1 ASC
),
-- remove root nodes
non_loop_members(strt, numb, len) AS (
    SELECT numb AS strt, numb, $lang
    FROM number_lengths
    WHERE numb NOT IN
    -- only get root nodes
    (SELECT numb
     FROM trans_closure
     WHERE numb = len)
),
path_group(strt, numb, len) AS (
    SELECT strt, numb, len
    FROM non_loop_members
    UNION ALL
    SELECT A.strt, A.len, B.len
    FROM path_group AS A JOIN non_loop_members AS B
    ON A.len = B.numb
    -- no loop count check is necessary because cyclic nodes were removed
),
smallest_path_lengths(strt, p_length) AS (
   SELECT strt, MIN(x) AS p_length
   FROM (SELECT strt, COUNT(*) AS x FROM path_group GROUP BY strt)
   GROUP BY x
)
SELECT smallest_path_lengths.strt, p_length,
       CAST(numb AS text) || " -> " || CAST(len AS text)
FROM smallest_path_lengths
JOIN path_group ON path_group.strt = smallest_path_lengths.strt;
   #+END_SRC

*** English
    Results above 323 and 124 were based on my own estimates and comments posted
    on the YouTube video.
**** US/EUR English Calculation                                    :noexport:
     #+CALL: disatnce_to_loop(lang='english_us') :exports none

     #+RESULTS:
     |   0 | 1 | 0 -> 4    |
     |   3 | 2 | 3 -> 5    |
     |   3 | 2 | 5 -> 4    |
     |   1 | 3 | 1 -> 3    |
     |   1 | 3 | 3 -> 5    |
     |   1 | 3 | 5 -> 4    |
     |  11 | 4 | 3 -> 5    |
     |  11 | 4 | 5 -> 4    |
     |  11 | 4 | 6 -> 3    |
     |  11 | 4 | 11 -> 6   |
     |  23 | 5 | 3 -> 5    |
     |  23 | 5 | 5 -> 4    |
     |  23 | 5 | 6 -> 3    |
     |  23 | 5 | 11 -> 6   |
     |  23 | 5 | 23 -> 11  |
     | 323 | 6 | 3 -> 5    |
     | 323 | 6 | 5 -> 4    |
     | 323 | 6 | 6 -> 3    |
     | 323 | 6 | 11 -> 6   |
     | 323 | 6 | 23 -> 11  |
     | 323 | 6 | 323 -> 23 |

     #+CALL: disatnce_to_loop(lang='english_eur') :exports none

     #+RESULTS:
     |   0 | 1 | 0 -> 4    |
     |   3 | 2 | 3 -> 5    |
     |   3 | 2 | 5 -> 4    |
     |   1 | 3 | 1 -> 3    |
     |   1 | 3 | 3 -> 5    |
     |   1 | 3 | 5 -> 4    |
     |  11 | 4 | 3 -> 5    |
     |  11 | 4 | 5 -> 4    |
     |  11 | 4 | 6 -> 3    |
     |  11 | 4 | 11 -> 6   |
     |  23 | 5 | 3 -> 5    |
     |  23 | 5 | 5 -> 4    |
     |  23 | 5 | 6 -> 3    |
     |  23 | 5 | 11 -> 6   |
     |  23 | 5 | 23 -> 11  |
     | 323 | 6 | 3 -> 5    |
     | 323 | 6 | 5 -> 4    |
     | 323 | 6 | 6 -> 3    |
     | 323 | 6 | 11 -> 6   |
     | 323 | 6 | 23 -> 11  |
     | 323 | 6 | 323 -> 23 |

     #+BEGIN_SRC dot :file sql-number-length-dag/english_eur_chains.svg :results silent :exports none
digraph eur {
0 -> 4
1 -> 3
11 -> 6
23 -> 11
3 -> 5
323 -> 23
5 -> 4
6 -> 3
"1,124373,373373,\n373373,373373,373373 \nlong scale" -> 323
"1,104,373,373,373,\n373,373,373,373,373,373\nshort scale" -> 323
"1,101,323,373,373,\n373,373,373,373,373,373\ntraditional" -> 323
}
     #+END_SRC
**** US/EUR English
     #+ATTR_HTML: :alt US and European English spelling length longest chain 323,23,11,6,3,5,4.
     [[file:sql-number-length-dag/english_eur_chains.svg]]
**** English with "and" Calculation                                :noexport:
     #+CALL: disatnce_to_loop(lang='english_gb') :exports none

     #+RESULTS:
     |   0 | 1 | 0 -> 4    |
     |   3 | 2 | 3 -> 5    |
     |   3 | 2 | 5 -> 4    |
     |   1 | 3 | 1 -> 3    |
     |   1 | 3 | 3 -> 5    |
     |   1 | 3 | 5 -> 4    |
     |  11 | 4 | 3 -> 5    |
     |  11 | 4 | 5 -> 4    |
     |  11 | 4 | 6 -> 3    |
     |  11 | 4 | 11 -> 6   |
     |  23 | 5 | 3 -> 5    |
     |  23 | 5 | 5 -> 4    |
     |  23 | 5 | 6 -> 3    |
     |  23 | 5 | 11 -> 6   |
     |  23 | 5 | 23 -> 11  |
     | 124 | 6 | 3 -> 5    |
     | 124 | 6 | 5 -> 4    |
     | 124 | 6 | 6 -> 3    |
     | 124 | 6 | 11 -> 6   |
     | 124 | 6 | 23 -> 11  |
     | 124 | 6 | 124 -> 23 |

     #+BEGIN_SRC dot :file sql-number-length-dag/english_gb_chains.svg :exports none
digraph gb {
0 -> 4
3 -> 5
5 -> 4
1 -> 3
6 -> 3
11 -> 6
23 -> 11
124 -> 23
"113,373,373,373\nshort scale" -> 124
"113323,373373\nlong scale" -> 124
"116,373,373,373\ntraditional" -> 124
}
     #+END_SRC
**** British English
     #+ATTR_HTML: :alt British English spelling length longest chain 124,23,11,6,3,5,4.
     [[file:sql-number-length-dag/english_gb_chains.svg]]

**** Longest Chains English Variants                               :noexport:
     The US and EUR English count the same until 1001, not using
     "and". While the British English version uses "and" but is
     otherwise the same.  There are six possibilities for the next
     number; three numbers per period with/without "and", six numbers
     per period with/without "and", and the traditional European system
     with/without "and" with three numbers per period.  The traditional
     scale is called long scale because a Billion means a Million,
     Million, and so on,
     https://en.wikipedia.org/wiki/Long_and_short_scales.  However, the
     traditional scale includes Milliard, Billiard, etc, increasing by
     factors of 1000; and using six numbers per period makes it the same
     as the Traditional British scale.

     US English and European English have the same graphs. These graphs
     represents numbers without using "and".  I estimated the next
     numbers in the chains, having path length seven. More on the in the
     section [[*Longest Chains English Variants][Longest Chains English Variants]]. There is probably not a
     named number in English with a path length of eight.

     The versions with "and" will have to add up to 124, while the
     versions without "and" must add up to 323.  These numbers are just
     estimates based on making initial guesses about the required scale,
     putting in numbers with long spellings, and making adjustments.

***** Short Scale English without "and"
      I calculated the next number in the chain by finding numbers of
      the form 323,323,... and 373,373,... that were close to 323 in
      length.  323 is the smallest number of length 23 and 373 is the
      smallest number of length 24, and there are no three digit numbers
      of any greater length.

      three hundred twenty-three Nonillion,
      three hundred twenty-three Octillion,
      three hundred twenty-three Septillion,
      three hundred twenty-three Sextillion,
      three hundred twenty-three Quintillion,
      three hundred twenty-three quadrillion,
      three hundred twenty-three trillion,
      three hundred twenty-three billion,
      three hundred twenty-three million,
      three hundred twenty-three thousand,
      three hundred twenty-three

      #+BEGIN_SRC emacs-lisp
(length "threehundredtwentythreeNonillionthreehundredtwentythreeOctillionthreehundredtwentythreeSeptillionthreehundredtwentythreeSextillionthreehundredtwentythreeQuintillionthreehundredtwentythreequadrillionthreehundredtwentythreetrillionthreehundredtwentythreebillionthreehundredtwentythreemillionthreehundredtwentythreethousandthreehundredtwentythree")
      #+END_SRC

    #+RESULTS:
    : 343

    one Nonillion,
    three hundred twenty-three Octillion,
    three hundred twenty-three Septillion,
    three hundred twenty-three Sextillion,
    three hundred twenty-three Quintillion,
    three hundred twenty-three quadrillion,
    three hundred twenty-three trillion,
    three hundred twenty-three billion,
    three hundred twenty-three million,
    three hundred twenty-three thousand,
    three hundred twenty-three

    #+BEGIN_SRC emacs-lisp
(length "oneNonillionthreehundredtwentythreeOctillionthreehundredtwentythreeSeptillionthreehundredtwentythreeSextillionthreehundredtwentythreeQuintillionthreehundredtwentythreequadrillionthreehundredtwentythreetrillionthreehundredtwentythreebillionthreehundredtwentythreemillionthreehundredtwentythreethousandthreehundredtwentythree")
    #+END_SRC

    #+RESULTS:
    : 323

    three hundred seventy-three Nonillion,
    three hundred seventy-three Octillion,
    three hundred seventy-three Septillion,
    three hundred seventy-three Sextillion,
    three hundred seventy-three Quintillion,
    three hundred seventy-three quadrillion,
    three hundred seventy-three trillion,
    three hundred seventy-three billion,
    three hundred seventy-three million,
    three hundred seventy-three thousand,
    three hundred seventy-three

    #+BEGIN_SRC emacs-lisp
(length "threehundredseventythreeNonillionthreehundredseventythreeOctillionthreehundredseventythreeSeptillionthreehundredseventythreeSextillionthreehundredseventythreeQuintillionthreehundredseventythreequadrillionthreehundredseventythreetrillionthreehundredseventythreebillionthreehundredseventythreemillionthreehundredseventythreethousandthreehundredseventythree")
    #+END_SRC

    #+RESULTS:
    : 354

    #+BEGIN_SRC emacs-lisp
(length "threehundredseventythreeOctillionthreehundredseventythreeSeptillionthreehundredseventythreeSextillionthreehundredseventythreeQuintillionthreehundredseventythreequadrillionthreehundredseventythreetrillionthreehundredseventythreebillionthreehundredseventythreemillionthreehundredseventythreethousandthreehundredseventythree")
    #+END_SRC

    #+RESULTS:
    : 321

    It appears that 1,323,323,323,323,323,323,323,323,323,323 is the
    smallest number with length 323.  The 373,... chain is just two
    letters short, but 373 is the longest 100s number, so adding more
    digits would require going up to the Nonillions.

***** Short Scale English with "and"
      The numbers 323 and 373 are again the longest 100s numbers, with
      lengths 26 and 27 respectively.

      three hundred and twenty-three billion,
      three hundred and twenty-three million,
      three hundred and twenty-three thousand,
      three hundred and twenty-three

    #+BEGIN_SRC emacs-lisp
(length "threehundredandtwentythreebillionthreehundredandtwentythreemillionthreehundredandtwentythreethousandthreehundredandtwentythree")
    #+END_SRC

    #+RESULTS:
    : 126

    #+BEGIN_SRC emacs-lisp
(length "onehundredandtwentythreebillionthreehundredandtwentythreemillionthreehundredandtwentythreethousandthreehundredandtwentythree")
    #+END_SRC

    #+RESULTS:
    : 124

    three hundred and seventy-three billion,
    three hundred and seventy-three million,
    three hundred and seventy-three thousand,
    three hundred and seventy-three

    #+BEGIN_SRC emacs-lisp
(length "threehundredandseventythreebillionthreehundredandseventythreemillionthreehundredandseventythreethousandthreehundredandseventythree")
    #+END_SRC

    #+RESULTS:
    : 130

    one hundred and twenty-three billion,
    one hundred and twenty-three million,
    three hundred and seventy-three thousand,
    three hundred and seventy-three

    #+BEGIN_SRC emacs-lisp
(length "onehundredandtwentythreebilliononehundredandtwentythreemillionthreehundredandseventythreethousandthreehundredandseventythree")
    #+END_SRC

    #+RESULTS:
    : 124

    123,123,373,373 appears to be the smallest number
    with length 124.  123 is the smallest number with length 24.

***** Long Scale English without "and"
      323373 and 373373 have lengths 55 and 56 respectively, which are
      the longest six digit numbers.

      #+BEGIN_SRC emacs-lisp
(nsl-list-numbers-in-language 'english-us 323373 373373)
      #+END_SRC

      #+RESULTS:
      | 323373 | 55 | three hundred twenty-three thousand, three hundred seventy-three  |
      | 373373 | 56 | three hundred seventy-three thousand, three hundred seventy-three |

     three hundred twenty-three thousand, three hundred seventy-three Quintillion,
     three hundred twenty-three thousand, three hundred seventy-three Quadrillion,
     three hundred twenty-three thousand, three hundred seventy-three trillion,
     three hundred twenty-three thousand, three hundred seventy-three billion,
     three hundred twenty-three thousand, three hundred seventy-three million,
     three hundred twenty-three thousand, three hundred seventy-three

     #+BEGIN_SRC emacs-lisp
(length "threehundredtwentythreethousandthreehundredseventythreeQuintillionthreehundredtwentythreethousandthreehundredseventythreeQuadrillionthreehundredtwentythreethousandthreehundredseventythreetrillionthreehundredtwentythreethousandthreehundredseventythreebillionthreehundredtwentythreethousandthreehundredseventythreemillionthreehundredtwentythreethousandthreehundredseventythree")
     #+END_SRC

     #+RESULTS:
     : 374

     #+BEGIN_SRC emacs-lisp
(length "oneQuintillionthreehundredtwentythreethousandthreehundredseventythreeQuadrillionthreehundredtwentythreethousandthreehundredseventythreetrillionthreehundredtwentythreethousandthreehundredseventythreebillionthreehundredtwentythreethousandthreehundredseventythreemillionthreehundredtwentythreethousandthreehundredseventythree")
     #+END_SRC

     #+RESULTS:
     : 322

     three hundred seventy-three thousand, three hundred seventy-three Quintillion,
     three hundred seventy-three thousand, three hundred seventy-three Quadrillion,
     three hundred seventy-three thousand, three hundred seventy-three trillion,
     three hundred seventy-three thousand, three hundred seventy-three billion,
     three hundred seventy-three thousand, three hundred seventy-three million,
     three hundred seventy-three thousand, three hundred seventy-three

     #+BEGIN_SRC emacs-lisp
(length "threehundredseventythreethousandthreehundredseventythreeQuintillionthreehundredseventythreethousandthreehundredseventythreeQuadrillionthreehundredseventythreethousandthreehundredseventythreetrillionthreehundredseventythreethousandthreehundredseventythreebillionthreehundredseventythreethousandthreehundredseventythreemillionthreehundredseventythreethousandthreehundredseventythree")
     #+END_SRC

     #+RESULTS:
     : 380

     one Quintillion,
     three hundred seventy-three thousand, three hundred seventy-three Quadrillion,
     three hundred seventy-three thousand, three hundred seventy-three trillion,
     three hundred seventy-three thousand, three hundred seventy-three billion,
     three hundred seventy-three thousand, three hundred seventy-three million,
     three hundred seventy-three thousand, three hundred seventy-three

     #+BEGIN_SRC emacs-lisp
(length "oneQuintillionthreehundredseventythreethousandthreehundredseventythreeQuadrillionthreehundredseventythreethousandthreehundredseventythreetrillionthreehundredseventythreethousandthreehundredseventythreebillionthreehundredseventythreethousandthreehundredseventythreemillionthreehundredseventythreethousandthreehundredseventythree")
     #+END_SRC

     #+RESULTS:
     : 327

     one Quintillion,
     three hundred twenty-three thousand, three hundred seventy-three Quadrillion,
     three hundred twenty-three thousand, three hundred seventy-three trillion,
     three hundred twenty-three thousand, three hundred seventy-three billion,
     three hundred twenty-three thousand, three hundred seventy-three million,
     three hundred seventy-three thousand, three hundred seventy-three

     #+BEGIN_SRC emacs-lisp
(length "oneQuintillionthreehundredtwentythreethousandthreehundredseventythreeQuadrillionthreehundredtwentythreethousandthreehundredseventythreetrillionthreehundredtwentythreethousandthreehundredseventythreebillionthreehundredtwentythreethousandthreehundredseventythreemillionthreehundredseventythreethousandthreehundredseventythree")
     #+END_SRC

     #+RESULTS:
     : 323

     With the long scale, the smallest number of length 323 is 1,323373,323373,323373,323373,373373.

***** Long Scale English with "and"
      #+BEGIN_SRC emacs-lisp
(nsl-list-numbers-in-language 'english-gb 323373 373373 173373 113323)
      #+END_SRC

      #+RESULTS:
      | 323373 | 61 | three hundred and twenty three thousand, three hundred and seventy three  |
      | 373373 | 62 | three hundred and seventy three thousand, three hundred and seventy three |
      | 173373 | 60 | one hundred and seventy three thousand, three hundred and seventy three   |
      | 113323 | 55 | one hundred and thirteen thousand, three hundred and twenty three         |

      three hundred and twenty three thousand, three hundred and seventy three million,
      three hundred and twenty three thousand, three hundred and seventy three

      #+BEGIN_SRC emacs-lisp
(length "threehundredandtwentythreethousandthreehundredandseventythreemillionthreehundredandtwentythreethousandthreehundredandseventythree")
      #+END_SRC

      #+RESULTS:
      : 129

      three hundred and seventy three thousand, three hundred and seventy three million,
      three hundred and seventy three thousand, three hundred and seventy three

      #+BEGIN_SRC emacs-lisp
(length "threehundredandseventythreethousandthreehundredandseventythreemillionthreehundredandseventythreethousandthreehundredandseventythree")
      #+END_SRC

      #+RESULTS:
      : 131

      one hundred and seventy three thousand, three hundred and seventy three million,
      one hundred and seventy three thousand, three hundred and seventy three

      #+BEGIN_SRC emacs-lisp
(length "onehundredandseventythreethousandthreehundredandseventythreemilliononehundredandseventythreethousandthreehundredandseventythree")
      #+END_SRC

      #+RESULTS:
      : 127

      The number is going to be in the millions.  Removing the "million"
      leaves 117 remaining digits.  Subtracting the longest 6-digit
      number leaves 55 characters.  The smallest 55 character number
      is 113323. So the number should be 113323,373373.

      one hundred and thirteen thousand, three hundred and twenty three million,
      three hundred and seventy three thousand, three hundred and seventy three

      #+BEGIN_SRC emacs-lisp
(length "onehundredandthirteenthousandthreehundredandtwentythreemillionthreehundredandseventythreethousandthreehundredandseventythree")
      #+END_SRC

      #+RESULTS:
      : 124

***** Traditional European English without "and"
      one Quintillion,
      three hundred twenty-three Quadrilliard,
      three hundred twenty-three Quadrillion,
      three hundred twenty-three Trilliard,
      three hundred twenty-three trillion,
      three hundred twenty three billiard,
      three hundred twenty three billion,
      three hundred twenty three milliard,
      three hundred twenty three million,
      three hundred twenty three thousand,
      three hundred twenty three

      #+BEGIN_SRC emacs-lisp
(length "oneQuintillionthreehundredtwentythreeQuadrilliardthreehundredtwentythreeQuadrillionthreehundredtwentythreeTrilliardthreehundredtwentythreetrillionthreehundredtwentythreebilliardthreehundredtwentythreebillionthreehundredtwentythreemilliardthreehundredtwentythreemillionthreehundredtwentythreethousandthreehundredtwentythree")
      #+END_SRC

      #+RESULTS:
      : 322

      one Quintillion,
      three hundred seventy-three Quadrilliard,
      three hundred seventy-three Quadrillion,
      three hundred seventy-three Trilliard,
      three hundred seventy-three trillion,
      three hundred seventy three billiard,
      three hundred seventy three billion,
      three hundred seventy three milliard,
      three hundred seventy three million,
      three hundred seventy three thousand,
      three hundred seventy three

      #+BEGIN_SRC emacs-lisp
(length "oneQuintillionthreehundredseventythreeQuadrilliardthreehundredseventythreeQuadrillionthreehundredseventythreeTrilliardthreehundredseventythreetrillionthreehundredseventythreebilliardthreehundredseventythreebillionthreehundredseventythreemilliardthreehundredseventythreemillionthreehundredseventythreethousandthreehundredseventythree")
      #+END_SRC

      #+RESULTS:
      : 332

      one Quintillion,
      three hundred twenty-three Quadrilliard,
      three hundred twenty-three Quadrillion,
      three hundred twenty-three Trilliard,
      three hundred twenty-three trillion,
      three hundred twenty three billiard,
      three hundred twenty three billion,
      three hundred twenty three milliard,
      three hundred twenty three million,
      three hundred twenty three thousand,
      three hundred seventy three

      #+BEGIN_SRC emacs-lisp
(length "oneQuintillionthreehundredtwentythreeQuadrilliardthreehundredtwentythreeQuadrillionthreehundredtwentythreeTrilliardthreehundredtwentythreetrillionthreehundredtwentythreebilliardthreehundredtwentythreebillionthreehundredtwentythreemilliardthreehundredtwentythreemillionthreehundredtwentythreethousandthreehundredseventythree")
      #+END_SRC

      #+RESULTS:
      : 323

      The smallest number of length 323 in the traditional European system without and is
      1,323,323,323,323,323,323,323,323,323,373, which is the same as the modern short system.

***** Traditional European English with "and"
      one hundred and twenty three milliard,
      three hundred and twenty three million,
      three hundred and twenty three thousand,
      three hundred and seventy three

      #+BEGIN_SRC emacs-lisp
(length "onehundredandtwentythreemilliardthreehundredandtwentythreemillionthreehundredandtwentythreethousandthreehundredandseventythree")
      #+END_SRC

      #+RESULTS:
      : 126

      323 is 26 characters. Replace the largest 323 with a 24 character one or 123, so

      one hundred and twenty three milliard,
      one hundred and twenty three million,
      three hundred and twenty three thousand,
      three hundred and seventy three

      #+BEGIN_SRC emacs-lisp
(length "onehundredandtwentyonemilliardthreehundredandtwentythreemillionthreehundredandtwentythreethousandthreehundredandseventythree")
      #+END_SRC

      #+RESULTS:
      : 124

      The smallest number of length 124 in the traditional European
      system with "and" is 123,123,323,373.

*** German
    #+ATTR_HTML: :alt German spelling length longest chain 120,20,7,6,5,4.
    [[file:sql-number-length-dag/german_chains.svg]]

**** German Calculation                                            :noexport:
    #+CALL: disatnce_to_loop(lang='german') :exports none

    #+RESULTS:
    |   0 | 1 | 0 -> 4    |
    |   6 | 2 | 5 -> 4    |
    |   6 | 2 | 6 -> 5    |
    |   7 | 3 | 5 -> 4    |
    |   7 | 3 | 6 -> 5    |
    |   7 | 3 | 7 -> 6    |
    |  20 | 4 | 5 -> 4    |
    |  20 | 4 | 6 -> 5    |
    |  20 | 4 | 7 -> 6    |
    |  20 | 4 | 20 -> 7   |
    | 120 | 5 | 5 -> 4    |
    | 120 | 5 | 6 -> 5    |
    | 120 | 5 | 7 -> 6    |
    | 120 | 5 | 20 -> 7   |
    | 120 | 5 | 120 -> 20 |

    #+BEGIN_SRC dot :file sql-number-length-dag/german_chains.svg :exports none :results silent
digraph german {
rankdir=LR;
120 -> 20
20 -> 7
5 -> 4
6 -> 5
7 -> 6
}
    #+END_SRC
*** Danish
    #+ATTR_HTML: :alt Danish spelling length longest chain 1133,31,11,6,4.
    [[file:sql-number-length-dag/danish_chains.svg]]
**** Danish Calculation                                            :noexport:
    Two is the smallest value with a path length of zero.

    #+CALL: disatnce_to_loop(lang='danish') :exports none

    #+RESULTS:
    |    0 | 1 | 0 -> 3     |
    |   11 | 2 | 6 -> 4     |
    |   11 | 2 | 11 -> 6    |
    |   31 | 3 | 6 -> 4     |
    |   31 | 3 | 11 -> 6    |
    |   31 | 3 | 31 -> 11   |
    | 1133 | 4 | 6 -> 4     |
    | 1133 | 4 | 11 -> 6    |
    | 1133 | 4 | 31 -> 11   |
    | 1133 | 4 | 1133 -> 31 |

    #+BEGIN_SRC dot :file sql-number-length-dag/danish_chains.svg :exports none
digraph danish {
rankdir=LR
11 -> 6
1133 -> 31
31 -> 11
6 -> 4
}
    #+END_SRC

*** Dutch
    #+ATTR_HTML: :alt Dutch spelling length longest chain 121,22,13,7,5,4.
    [[file:sql-number-length-dag/dutch_chains.svg]]
**** Dutch Calculation                                             :noexport:
    #+CALL: disatnce_to_loop(lang='dutch') :exports none

    #+RESULTS:
    |   2 | 1 | 2 -> 4    |
    |   0 | 2 | 0 -> 3    |
    |   0 | 2 | 3 -> 4    |
    |  12 | 3 | 3 -> 4    |
    |  12 | 3 | 6 -> 3    |
    |  12 | 3 | 12 -> 6   |
    |  21 | 4 | 3 -> 4    |
    |  21 | 4 | 6 -> 3    |
    |  21 | 4 | 12 -> 6   |
    |  21 | 4 | 21 -> 12  |
    | 121 | 5 | 5 -> 4    |
    | 121 | 5 | 7 -> 5    |
    | 121 | 5 | 13 -> 7   |
    | 121 | 5 | 22 -> 13  |
    | 121 | 5 | 121 -> 22 |

    #+BEGIN_SRC dot :file sql-number-length-dag/dutch_chains.svg :exports none
digraph dutch {
rankdir=LR
121 -> 22
22 -> 13
13 -> 7
7 -> 5
5 -> 4
}
    #+END_SRC
*** Norwegian
    #+ATTR_HTML: :alt Norwegian spelling length longest chain 101,13,7,3.
    [[file:sql-number-length-dag/norwegian_chains.svg]]

**** Norwegian Calculation                                         :noexport:
    #+CALL: disatnce_to_loop(lang='norwegian') :exports none

    #+RESULTS:
    |   0 | 1 | 0 -> 4    |
    |  11 | 2 | 6 -> 4    |
    |  11 | 2 | 11 -> 6   |
    | 101 | 3 | 7 -> 3    |
    | 101 | 3 | 13 -> 7   |
    | 101 | 3 | 101 -> 13 |

    #+BEGIN_SRC dot :file sql-number-length-dag/norwegian_chains.svg :exports none
digraph norwegian {
rankdir=LR
7 -> 3
13 -> 7
101 -> 13
}
    #+END_SRC
*** Swedish
    #+ATTR_HTML: :alt Swedish spelling length longest chain 101,15,6,3.
    [[file:sql-number-length-dag/swedish_chains.svg]]

**** Swedish Calculation                                           :noexport:
    #+CALL: disatnce_to_loop(lang='swedish') :exports none

    #+RESULTS:
    |   0 | 1 | 0 -> 4    |
    |  13 | 2 | 7 -> 3    |
    |  13 | 2 | 13 -> 7   |
    | 101 | 3 | 6 -> 3    |
    | 101 | 3 | 15 -> 6   |
    | 101 | 3 | 101 -> 15 |

    #+BEGIN_SRC dot :file sql-number-length-dag/swedish_chains.svg :exports none
digraph swedish {
rankdir=LR
6 -> 3
15 -> 6
101 -> 15
}
    #+END_SRC
*** Spanish
    #+ATTR_HTML: :alt Spanish spelling length longest chain 2444,34,14,7,5.
    [[file:sql-number-length-dag/spanish_chains.svg]]
**** Spanish Calculation                                           :noexport:
    #+CALL: disatnce_to_loop(lang='spanish') :exports none

    #+RESULTS:
    |    0 | 1 | 0 -> 4     |
    |    1 | 2 | 1 -> 3     |
    |    1 | 2 | 3 -> 4     |
    |   34 | 3 | 7 -> 5     |
    |   34 | 3 | 14 -> 7    |
    |   34 | 3 | 34 -> 14   |
    | 2444 | 4 | 7 -> 5     |
    | 2444 | 4 | 14 -> 7    |
    | 2444 | 4 | 34 -> 14   |
    | 2444 | 4 | 2444 -> 34 |

    #+BEGIN_SRC dot :file sql-number-length-dag/spanish_chains.svg :exports none
digraph spanish {
rankdir=LR
7 -> 5
14 -> 7
34 -> 14
2444 -> 34
}
    #+END_SRC

*** Catalan
    #+ATTR_HTML: :alt Catalan spelling length longest chain 14444,35,12,5,4.
    [[file:sql-number-length-dag/catalan_chains.svg]]
**** Catalan Calculation                                           :noexport:
    #+CALL: disatnce_to_loop(lang='catalan') :exports none

    #+RESULTS:
    |     0 | 1 | 0 -> 4      |
    |     1 | 2 | 1 -> 2      |
    |     1 | 2 | 2 -> 3      |
    |    35 | 3 | 5 -> 4      |
    |    35 | 3 | 12 -> 5     |
    |    35 | 3 | 35 -> 12    |
    | 14444 | 4 | 5 -> 4      |
    | 14444 | 4 | 12 -> 5     |
    | 14444 | 4 | 35 -> 12    |
    | 14444 | 4 | 14444 -> 35 |

    #+BEGIN_SRC dot :file sql-number-length-dag/catalan_chains.svg :exports none
digraph catalan{
rankdir=LR
5 -> 4
12 -> 5
35 -> 12
14444 -> 35
}
    #+END_SRC
*** Portuguese
    #+ATTR_HTML: :alt Portuguese spelling length longest chain 154,22,10,3,4.
    [[file:sql-number-length-dag/portuguese_br_chains.svg]]

**** Portuguese Calculation                                        :noexport:
    #+CALL: disatnce_to_loop(lang='portuguese_br') :exports none

    #+RESULTS:
    |   0 | 1 | 0 -> 4    |
    |   1 | 2 | 1 -> 2    |
    |   1 | 2 | 2 -> 4    |
    |  22 | 3 | 3 -> 4    |
    |  22 | 3 | 10 -> 3   |
    |  22 | 3 | 22 -> 10  |
    | 154 | 4 | 3 -> 4    |
    | 154 | 4 | 10 -> 3   |
    | 154 | 4 | 22 -> 10  |
    | 154 | 4 | 154 -> 22 |

    #+CALL: disatnce_to_loop(lang='portuguese_pt') :exports none

    #+RESULTS:
    |   0 | 1 | 0 -> 4    |
    |   1 | 2 | 1 -> 2    |
    |   1 | 2 | 2 -> 4    |
    |  22 | 3 | 3 -> 4    |
    |  22 | 3 | 10 -> 3   |
    |  22 | 3 | 22 -> 10  |
    | 154 | 4 | 3 -> 4    |
    | 154 | 4 | 10 -> 3   |
    | 154 | 4 | 22 -> 10  |
    | 154 | 4 | 154 -> 22 |

    #+BEGIN_SRC dot :file sql-number-length-dag/portuguese_br_chains.svg :exports none
digraph portuguese_br {
rankdir=LR
3 -> 4
10 -> 3
22 -> 10
154 -> 22
}
    #+END_SRC
*** Swiss French
    #+ATTR_HTML: :alt Swiss French spelling length longest chain 44454,44,14,8,4.
    [[file:sql-number-length-dag/french_ch_chains.svg]]

**** Swiss French Calculation                                      :noexport:
     #+CALL: disatnce_to_loop(lang='french_ch') :exports none

     #+RESULTS:
     |     0 | 1 | 0 -> 4      |
     |     1 | 2 | 1 -> 2      |
     |     1 | 2 | 2 -> 4      |
     |    44 | 3 | 8 -> 4      |
     |    44 | 3 | 14 -> 8     |
     |    44 | 3 | 44 -> 14    |
     | 44454 | 4 | 8 -> 4      |
     | 44454 | 4 | 14 -> 8     |
     | 44454 | 4 | 44 -> 14    |
     | 44454 | 4 | 44454 -> 44 |

     #+BEGIN_SRC dot :file sql-number-length-dag/french_ch_chains.svg :exports none
digraph french_ch {
rankdir=LR
8 -> 4
14 -> 8
44 -> 14
44454 -> 44
}
     #+END_SRC
*** Standard French
    #+ATTR_HTML: :alt Standard French spelling length longest chain 23494,44,14,8,4.
    [[file:sql-number-length-dag/french_fr_chains.svg]]

**** Standard French Calculation                                   :noexport:
    #+CALL: disatnce_to_loop(lang='french_fr') :exports none

    #+RESULTS:
    |     0 | 1 | 0 -> 4      |
    |     1 | 2 | 1 -> 2      |
    |     1 | 2 | 2 -> 4      |
    |    44 | 3 | 8 -> 4      |
    |    44 | 3 | 14 -> 8     |
    |    44 | 3 | 44 -> 14    |
    | 23494 | 4 | 8 -> 4      |
    | 23494 | 4 | 14 -> 8     |
    | 23494 | 4 | 44 -> 14    |
    | 23494 | 4 | 23494 -> 44 |

    #+BEGIN_SRC dot :file sql-number-length-dag/french_fr_chains.svg :exports none
digraph french_fr {
rankdir=LR
8 -> 4
14 -> 8
44 -> 14
23494 -> 44
}
    #+END_SRC
*** Italian
    #+ATTR_HTML: :alt Italian spelling length longest chain 24454,44,15,8,4,7,5,6,3.
    [[file:sql-number-length-dag/italian_chains.svg]]

**** Italian Calculation                                           :noexport:
    #+CALL: disatnce_to_loop(lang='italian') :exports none

    #+RESULTS:
    |     1 | 1 | 1 -> 3      |
    |     5 | 2 | 5 -> 6      |
    |     5 | 2 | 6 -> 3      |
    |     7 | 3 | 5 -> 6      |
    |     7 | 3 | 6 -> 3      |
    |     7 | 3 | 7 -> 5      |
    |     4 | 4 | 4 -> 7      |
    |     4 | 4 | 5 -> 6      |
    |     4 | 4 | 6 -> 3      |
    |     4 | 4 | 7 -> 5      |
    |     0 | 5 | 0 -> 4      |
    |     0 | 5 | 4 -> 7      |
    |     0 | 5 | 5 -> 6      |
    |     0 | 5 | 6 -> 3      |
    |     0 | 5 | 7 -> 5      |
    |    15 | 6 | 4 -> 7      |
    |    15 | 6 | 5 -> 6      |
    |    15 | 6 | 6 -> 3      |
    |    15 | 6 | 7 -> 5      |
    |    15 | 6 | 8 -> 4      |
    |    15 | 6 | 15 -> 8     |
    |    44 | 7 | 4 -> 7      |
    |    44 | 7 | 5 -> 6      |
    |    44 | 7 | 6 -> 3      |
    |    44 | 7 | 7 -> 5      |
    |    44 | 7 | 8 -> 4      |
    |    44 | 7 | 15 -> 8     |
    |    44 | 7 | 44 -> 15    |
    | 24454 | 8 | 4 -> 7      |
    | 24454 | 8 | 5 -> 6      |
    | 24454 | 8 | 6 -> 3      |
    | 24454 | 8 | 7 -> 5      |
    | 24454 | 8 | 8 -> 4      |
    | 24454 | 8 | 15 -> 8     |
    | 24454 | 8 | 44 -> 15    |
    | 24454 | 8 | 24454 -> 44 |

    #+BEGIN_SRC dot :file sql-number-length-dag/italian_chains.svg :exports none
digraph italian {
rankdir=LR
4 -> 7
5 -> 6
6 -> 3
7 -> 5
8 -> 4
15 -> 8
44 -> 15
24454 -> 44
}
    #+END_SRC
*** Finnish
    #+ATTR_HTML: :alt Finnish spelling length longest chain 179,29,21,17,15,11,10,8.
    [[file:sql-number-length-dag/finnish_chains.svg]]

**** Finnish Calculation                                           :noexport:
    #+CALL: disatnce_to_loop(lang='finnish') :exports none

    #+RESULTS:
    |   0 | 1 | 0 -> 5    |
    |   1 | 2 | 1 -> 4    |
    |   1 | 2 | 4 -> 5    |
    |  12 | 3 | 10 -> 8   |
    |  12 | 3 | 11 -> 10  |
    |  12 | 3 | 12 -> 11  |
    |  17 | 4 | 10 -> 8   |
    |  17 | 4 | 11 -> 10  |
    |  17 | 4 | 15 -> 11  |
    |  17 | 4 | 17 -> 15  |
    |  21 | 5 | 10 -> 8   |
    |  21 | 5 | 11 -> 10  |
    |  21 | 5 | 15 -> 11  |
    |  21 | 5 | 17 -> 15  |
    |  21 | 5 | 21 -> 17  |
    |  27 | 6 | 10 -> 8   |
    |  27 | 6 | 11 -> 10  |
    |  27 | 6 | 15 -> 11  |
    |  27 | 6 | 18 -> 15  |
    |  27 | 6 | 22 -> 18  |
    |  27 | 6 | 27 -> 22  |
    | 179 | 7 | 10 -> 8   |
    | 179 | 7 | 11 -> 10  |
    | 179 | 7 | 15 -> 11  |
    | 179 | 7 | 17 -> 15  |
    | 179 | 7 | 21 -> 17  |
    | 179 | 7 | 29 -> 21  |
    | 179 | 7 | 179 -> 29 |

    #+BEGIN_SRC dot :file sql-number-length-dag/finnish_chains.svg :exports none
digraph finnish {
rankdir=LR
10 -> 8
11 -> 10
15 -> 11
17 -> 15
21 -> 17
29 -> 21
179 -> 29
}
    #+END_SRC
*** Esperanto
    #+ATTR_HTML: :alt Esperanto spelling length longest chain 44,11,6,3.
    [[file:sql-number-length-dag/esperanto_chains.svg]]
**** Esperanto calculation                                         :noexport:
    #+CALL: disatnce_to_loop(lang='esperanto') :exports none

    #+RESULTS:
    |  0 | 1 | 0 -> 4   |
    | 11 | 2 | 6 -> 3   |
    | 11 | 2 | 11 -> 6  |
    | 44 | 3 | 6 -> 3   |
    | 44 | 3 | 11 -> 6  |
    | 44 | 3 | 44 -> 11 |

    #+BEGIN_SRC dot :file sql-number-length-dag/esperanto_chains.svg :exports none
digraph esperanto {
rankdir=LR
6 -> 3
11 -> 6
44 -> 11
}
    #+END_SRC
*** Japanese
    #+ATTR_HTML: :alt Japanses Remanji spelling length longest chain 68,11,6,4,3.
    [[file:sql-number-length-dag/japanese_chains.svg]]

**** Japanese Calculation                                          :noexport:
    #+CALL: disatnce_to_loop(lang='japanese') :exports none

    #+RESULTS:
    |  0 | 1 | 0 -> 3   |
    |  1 | 2 | 1 -> 4   |
    |  1 | 2 | 4 -> 3   |
    | 11 | 3 | 4 -> 3   |
    | 11 | 3 | 6 -> 4   |
    | 11 | 3 | 11 -> 6  |
    | 68 | 4 | 4 -> 3   |
    | 68 | 4 | 6 -> 4   |
    | 68 | 4 | 11 -> 6  |
    | 68 | 4 | 68 -> 11 |

    #+BEGIN_SRC dot :file sql-number-length-dag/japanese_chains.svg :exports none
digraph japanese {
rankdir=LR
4 -> 3
6 -> 4
11 -> 6
68 -> 11
}
    #+END_SRC
